<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-11-17T22:22:15-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">La voragine</title><subtitle>LaVoragine.org es un laboratorio de edición digital.
</subtitle><author><name>la Vorágine</name></author><entry><title type="html">La gran novela americana</title><link href="http://localhost:4000/la-gran-novela-americana/" rel="alternate" type="text/html" title="La gran novela americana" /><published>2021-11-13T00:00:00-03:00</published><updated>2021-11-13T00:00:00-03:00</updated><id>http://localhost:4000/la-gran-novela-americana</id><content type="html" xml:base="http://localhost:4000/la-gran-novela-americana/">&lt;p&gt;Publicada por primera vez en 1923 en París en una edición de trescientos ejemplares, esta novela satírica del gran poeta estadounidense es una sátira de la novela que acaba siendo una crítica mordaz del colonialismo, el americanismo, lo manifiesto del destino y el proceso creativo en su totalidad. Mucho juego de palabras e hilaridad y robo de varios textos y frases brillantes aquí y allá como “Si no es extravagante, se convierte en deformidad: si no es difícil se convierte en crimen”.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Libros" /><category term="feminismo" /><summary type="html">Publicada por primera vez en 1923 en París en una edición de trescientos ejemplares, esta novela satírica del gran poeta estadounidense es una sátira de la novela que acaba siendo una crítica mordaz del colonialismo, el americanismo, lo manifiesto del destino y el proceso creativo en su totalidad. Mucho juego de palabras e hilaridad y robo de varios textos y frases brillantes aquí y allá como “Si no es extravagante, se convierte en deformidad: si no es difícil se convierte en crimen”.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/williamscarlos.png" /><media:content medium="image" url="http://localhost:4000/williamscarlos.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Púrpura imperial</title><link href="http://localhost:4000/purpura-imperial/" rel="alternate" type="text/html" title="Púrpura imperial" /><published>2021-11-13T00:00:00-03:00</published><updated>2021-11-13T00:00:00-03:00</updated><id>http://localhost:4000/purpura-imperial</id><content type="html" xml:base="http://localhost:4000/purpura-imperial/">&lt;p&gt;recursor de la no ficción creativa, Edgar Saltus se inspira en los textos de Suetonio y Tácito para hacer un retrato subyugante de la Roma de los emperadores. Su propósito no es reconstruir los hechos históricos, sino capturar el espíritu de una civilización, haciéndonos respirar la atmósfera de su decadencia. Desde una visión muy pesimista de la naturaleza humana, el autor aborda el mal como una oportunidad para la belleza. Aunque en Púrpura imperial se relatan con admiración apenas contenida los excesos de los emperadores, no estamos ante una celebración de la depravación, sino de sus posibilidades estéticas. Para Saltus, los emperadores no eran peores que el resto de los mortales, pero, poderosos como dioses, podían conducir su abyección a los confines de lo posible. En esa circunstancia excepcional, donde está ausente toda moral, el autor vislumbra una ocasión única para demostrar su condición de gran estilista: en Púrpura imperial Saltus talla su prosa con la precisión de Flaubert, la imaginería decadente de Huysmans y la expresividad de Poe. El efecto es deslumbrante, un tapiz donde la belleza prevalece sobre el horror.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Libros" /><category term="feminismo" /><summary type="html">recursor de la no ficción creativa, Edgar Saltus se inspira en los textos de Suetonio y Tácito para hacer un retrato subyugante de la Roma de los emperadores. Su propósito no es reconstruir los hechos históricos, sino capturar el espíritu de una civilización, haciéndonos respirar la atmósfera de su decadencia. Desde una visión muy pesimista de la naturaleza humana, el autor aborda el mal como una oportunidad para la belleza. Aunque en Púrpura imperial se relatan con admiración apenas contenida los excesos de los emperadores, no estamos ante una celebración de la depravación, sino de sus posibilidades estéticas. Para Saltus, los emperadores no eran peores que el resto de los mortales, pero, poderosos como dioses, podían conducir su abyección a los confines de lo posible. En esa circunstancia excepcional, donde está ausente toda moral, el autor vislumbra una ocasión única para demostrar su condición de gran estilista: en Púrpura imperial Saltus talla su prosa con la precisión de Flaubert, la imaginería decadente de Huysmans y la expresividad de Poe. El efecto es deslumbrante, un tapiz donde la belleza prevalece sobre el horror.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/saltus_cover.png" /><media:content medium="image" url="http://localhost:4000/saltus_cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">La misteriosa maternidad del verso</title><link href="http://localhost:4000/la-misteriosa-maternidad-del-verso/" rel="alternate" type="text/html" title="La misteriosa maternidad del verso" /><published>2020-12-21T00:00:00-03:00</published><updated>2020-12-21T00:00:00-03:00</updated><id>http://localhost:4000/la-misteriosa-maternidad-del-verso</id><content type="html" xml:base="http://localhost:4000/la-misteriosa-maternidad-del-verso/">&lt;p&gt;«El año 1938 el Ministro de Educación de Uruguay organizó un curso de verano llamado «Curso sudamericano en la Universidad de Montevideo. A una de las sesiones fueron invitadas las mayores exponentes de la poesía del cono sur de ese momento: Juana de Ibarbourou, de Uruguay; Alfonsina Storni, de Argentina y Gabriela Mistral, de Chile, para hablar de su labor poética y explicar cómo escribían sus versos.»&lt;/p&gt;

&lt;p&gt;Texto fundacional del feminismo literario en lengua española, Ibarbourou, Storni y Mistral plantaron, sin acaso saberlo, la semilla de toda la poesía femenina latinoamericana posterior.&lt;/p&gt;

&lt;p&gt;«Son tres mujeres unidas en la historia de la poesía hispanoamericana bajo la tutela de la adelantada Delmira Agustini, la más agónica, que fue destruida por la red de prejuicios del Uruguay de 1914. Las tres sufrientes y heroicas, pagaron con su vida o su felicidad, la entrega a la Poesía.»&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;«El poema tampoco sabemos dónde comienza.
¿Comienza en el momento en que se hace? […]
¿Comienza en el momento en que nos cae esa
la emoción? Porque cuando la lanzada nos trabaja,
ya venía de tan tarde el hacerse la carne tierna
para la lanzada.
Habría que remontar a todo lo que nos ha ido
trabajando el corazón, para esa calidad de la carne
que le damos a la cuchillada. Es decir, habría que
comenzar en la infancia, donde todo comienza.
Pero, cuando nacemos ya traemos tanto capital
viejo y deuda grande.
Habría que comenzar con toda la muchedumbre
de nuestros antepasados. ¡Menudo trabajo contar
cómo se hacen los versos!»&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Libros" /><category term="feminismo" /><summary type="html">«El año 1938 el Ministro de Educación de Uruguay organizó un curso de verano llamado «Curso sudamericano en la Universidad de Montevideo. A una de las sesiones fueron invitadas las mayores exponentes de la poesía del cono sur de ese momento: Juana de Ibarbourou, de Uruguay; Alfonsina Storni, de Argentina y Gabriela Mistral, de Chile, para hablar de su labor poética y explicar cómo escribían sus versos.»</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/3_conferencias_thumb.png" /><media:content medium="image" url="http://localhost:4000/3_conferencias_thumb.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Edición sostenible con pandoc, markdown y git. Parte 3: Formatear</title><link href="http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-3/" rel="alternate" type="text/html" title="Edición sostenible con pandoc, markdown y git. Parte 3: Formatear" /><published>2020-08-25T20:00:00-04:00</published><updated>2020-08-25T20:00:00-04:00</updated><id>http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-3</id><content type="html" xml:base="http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-3/">&lt;h2 id=&quot;formatear&quot;&gt;Formatear&lt;/h2&gt;

&lt;h3 id=&quot;preparar-el-ms&quot;&gt;Preparar el MS&lt;/h3&gt;

&lt;p&gt;De momento tenemos una carpeta, una serie de subcarpetas, y un único archivo. Pero, ¿no íbamos a partir desde markdown? En efecto. Por tanto, lo primero que haremos será convertir el documento base &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidFinal.docx&apos;&lt;/code&gt; a markdown. Y aquí es dónde entra Pandoc.&lt;/p&gt;

&lt;p&gt;Pandoc es un software de linea de comandos (CLI), creado y mantenido por John MacFarlane, profesor de Filosofía en la Universidad de California en Berkeley. Muy brevemente, se puede describir como un conversor universal de formatos de texto. Pero es mucho más. Y puesto que fue concebido por un académico y con el objetivo de servir de herramientas a académicos, cuenta entre sus virtudes la capacidad de manejar metadata, referencias bibliograficas y sistemas de citación que mejoran casi cualquier herramienta dedicada a estas tareas. Hablaremos más adelante más en detalles de qué hace y cómo lo hace, de momento (y como demostración de lo que es capaz), vamos a navegar a la carpeta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;, que contiene el documento &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidFinal.docx&lt;/code&gt; y vamos a abrir la línea de comandos ahí. En Windows, sencillamente hay que abrir la carpeta correspondiente y hacer click en Archivo &amp;gt; abrir Windows Power Shell:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/lineaDeComandos.png&quot; alt=&quot;linea de comandos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;y cuando se abra el Power Shell, vamos a escribir:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; pandoc mioCidFinal.docx -f docx+empty_paragraphs -t markdown --wrap=none --atx -o mioCidCampeador.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Si ahora miramos de nuevo en la carpeta, veremos que un nuevo archivo (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidCampeador.md&lt;/code&gt;) ha aparecido en ella.&lt;/p&gt;

&lt;p&gt;¿Qué hemos hecho? Paso por paso, es lo siguiente:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hemos invocado el programa que vamos a utilizar (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;le hemos dicho a qué archivo tiene que aplicar las opciones que vamos a definir (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidFinal.docx&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;le hemos dicho desde qué formato tiene que partir y cómo tratarlo: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;, de &lt;em&gt;from&lt;/em&gt;, desde, en inglés; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docx&lt;/code&gt;, es el formato de partida; la opción &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;empty_paragraphs&lt;/code&gt; le dice a Pandoc que queremos que limpie el archivo de todas las líneas vacías. Pandoc va a preservar todos los estilos predeterminados (encabezados) y estilos locales (itálicas y negritas), traduciéndolos a etiquetas en markdown, pero va a ignorar todos los estilos personalizados que hubiéramos podido definir en el documento (en caso de que quisieramos conservar los estilos personalizados de word, hay una opción: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+styles&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;le hemos dicho a qué formato
tiene que convertir el documento: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t markdown&lt;/code&gt;, a markdown.&lt;/li&gt;
  &lt;li&gt;Le hemos dicho que elimine el ajuste de línea (word wrap) o saltos de línea no semánticos: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrap=none&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Que uniforme los encabezados (markdown tiene dos maneras de etiquetar encabezados, atx o setext-style headers): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--atx&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;y que con toda esta información, cree un archivo llamado &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidCampeador.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pandoc ha hecho todo eso en un par de segundos.&lt;/p&gt;

&lt;h3 id=&quot;markdown&quot;&gt;Markdown&lt;/h3&gt;

&lt;p&gt;Ahora podemos abrir el directorio de nuestro proyecto con nuestro editor de texto y veremos el árbol de carpetas:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/abrirCarpetaDeTrabajoConElEditorDeTexto.png&quot; alt=&quot;projectFolderEnAtom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Abrimos el archivo mioCidCampeador.md (doble click en el panel de la derecha) y
podemos ver lo que pandoc ha hecho. Los encabezados están correctamente distribuidos a lo largo del documento, el formato local se ha preservado. Incluso, podemos ver que Pandoc ha interpretado una tabla en el documento Word y la ha trasladado a markdown correctamente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tablasEnMarkdown.png&quot; alt=&quot;tablas (convertidas desde Word) en markdown&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como en cualquier manuscrito, es probable que halla numerosas correcciones que hacer, pero aquí tenemos una buena base. Volveremos al tema de las correcciones más adelante&lt;/p&gt;

&lt;p&gt;De momento, vamos a sumir que la conversión fue exitosa. Podemos abrir el Outline del documento y verificar la estructura del documento, eso es ahora lo que más nos importa.
Markdown tiene una sintaxis extremadamente sencilla de aprender. Si miramos el documento, podemos ver que:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;los encabezados están marcados por hashes (#): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# este es un título de primer nivel&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;## este es un título de segundo nivel&lt;/code&gt;, etc…&lt;/li&gt;
  &lt;li&gt;las itálicas corresponden a las palabras (o frases) encerradas entre dos asteriscos (&lt;em&gt;palabra_italicas&lt;/em&gt;) y que las negritas lo están entre dos asteriscos (&lt;strong&gt;esta_es_una_palabra_en_negritas&lt;/strong&gt;).&lt;/li&gt;
  &lt;li&gt;Las tablas se construyen con una combinación de guiones y barras verticales.&lt;/li&gt;
  &lt;li&gt;Las listas numeradas, con el número, un punto y un espacio (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1. item_de_lista&lt;/code&gt;) y las listas sin numerar con guión y espacio (- item_de_lista_sin_numerar)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/markdown_ejemplo.png&quot; alt=&quot;ejemplo sintaxis markdown&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para una referencia de la sintaxis markdown, &lt;a href=&quot;http://https://pandoc.org/MANUAL.html#pandocs-markdown&quot;&gt;aquí&lt;/a&gt; está la página de referencia.&lt;/p&gt;

&lt;h3 id=&quot;generar-html-a-partir-de-markdown&quot;&gt;Generar HTML a partir de Markdown&lt;/h3&gt;

&lt;p&gt;En un archivo HTML o EPUB (que en términos muy bastos no es otra cosa que un conjunto de archivos HTML: algo así como una página web comprimida y preparada para que la lea un dispositivo especializado) podemos distinguir dos secciones diferenciadas: el elemento &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head&lt;/code&gt; y el elemento &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;. El &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; es el contenido que es renderizado por un navegador (o por un software de lectura, en el caso de un archivo ‘epub’) y se muestra en la pantalla del dispositivo. El elemento ‘head’ en cambio contiene todo lo que necesita saber el software que va a renderizar la página para mostrarla correctamente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot; dir=&quot;ltr&quot;&amp;gt;
  &amp;lt;head&amp;gt;

    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;mi libro&amp;lt;/title&amp;gt;

  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt; Este es el título del documento&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt; y aqui viene el cuerpo de texto&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Este ejemplo muestra cómo se estructura un archivo ‘html’ muy básico. Pandoc es capaz de convertir un archivo markdown a HTML, incluyendo en éste toda la estructura semántica que hemos añadido al texto. Si convertimos el archivo del &lt;em&gt;Mio Cid Campeador&lt;/em&gt; a HTML utilizando Pandoc (lo podemos hacer situándonos con el Power Shell en la carpeta donde está el archivo markdown y escribiendo: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc MioCidCampeador.md -f markdown -t html -o MioCidCampeador.html&lt;/code&gt;), va a convertir el archivo de esta manera:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;h2 id=&quot;nota-de-los-editores1&quot;&amp;gt;Nota de los editores&amp;lt;a href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;No necesitamos presentar al público a Vicente Huidobro, poeta de fama mundial y que fue el iniciador de la mas nueva modalidad poética. De él nacieron el creacionismo y el ultraísmo y muchos otros &amp;lt;em&amp;gt;ismos&amp;lt;/em&amp;gt; más o menos legítimos que corren por el mundo.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Después de cuatro años de silencio, en que tal vez asqueado del ambiente y la vida literaria el poeta se refugió en sí mismo, hoy sale otra vez al público y se presenta con una obra maestra. Maestra por su fuerza lírica, por su fuerza de pasión, por su originalidad de fondo y forma.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;¿Donde está el elemnto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head&lt;/code&gt;?
Lo que ha hecho Pandoc es convertir a etiquetas HTML todo el documento markdown, pero dado que no le hemos dicho explícitamente que queríamos un documento independiente, con sus elementos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;, no lo ha hecho. Esto puede parecer una limitación, pero en efecto es extremadamente útil cuando lo que queremos es sencillamente HTML puro para insertarlo en otro documento. Para que haga el trabajo completo, tenemos que agregar la opción &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt; (por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;standalone&lt;/code&gt;, lo que a pandoc le dice que lo queremos es un documento independiente).&lt;/p&gt;

&lt;p&gt;Si ahora reescribimos la orden:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc MioCidCampeador.md -f markdown -s -t html -o MioCidCampeador.html&lt;/code&gt;, van a pasar dos cosas:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Pandoc va a crear el documento de la manera que esperamos:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
  &amp;lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&amp;gt;
  &amp;lt;title&amp;gt;MioCidCampeador&amp;lt;/title&amp;gt;
  &amp;lt;style&amp;gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &amp;lt;/style&amp;gt;
  &amp;lt;!--[if lt IE 9]&amp;gt;
    &amp;lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;![endif]--&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h2 id=&quot;nota-de-los-editores1&quot;&amp;gt;Nota de los editores&amp;lt;a href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;No necesitamos presentar al público a Vicente Huidobro, poeta de fama mundial y que fue el iniciador de la mas nueva modalidad poética. De él nacieron el creacionismo y el ultraísmo y muchos otros &amp;lt;em&amp;gt;ismos&amp;lt;/em&amp;gt; más o menos legítimos que corren por el mundo.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Después de cuatro años de silencio, en que tal vez asqueado del ambiente y la vida literaria el poeta se refugió en sí mismo, hoy sale otra vez al público y se presenta con una obra maestra. Maestra por su fuerza lírica, por su fuerza de pasión, por su originalidad de fondo y forma.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2) Y nos va a arrojar un mensaje de error:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[WARNING] This document format requires a nonempty &amp;lt;title&amp;gt; element.
Defaulting to &apos;MioCidCampeador&apos; as the title.
To specify a title, use &apos;title&apos; in metadata or --metadata title=&quot;...&quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Este mensaje significa que Pandoc ha sido capaz de crear el documento, pero dado que no le hemos indicado qué metadata utilizar, lo ha construido a partir de sus valores por defecto. Como, según la especificación, lo único imprescindible es que un documento tenga un título, Pandoc ha creado un título a partir del nombre del archivo.&lt;/p&gt;

&lt;h3 id=&quot;metadata&quot;&gt;Metadata&lt;/h3&gt;

&lt;p&gt;Ya sabemos como Pandoc puede convertir automáticamente un documento markdown a HTML (sobre cómo se convierte a EPUB, lo veremos más adelante, pero el principio es el mismo). Lo que necesitamos ahora es aprender a alimentar a Pandoc con metadata para que este pueda escribirla en HTML (y en epub).&lt;/p&gt;

&lt;p&gt;Existen varias maneras de preparar un archivo de metadata, la manera más simple es incluirla dentro del archivo markdown utilizando un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml block&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;Yaml&lt;/a&gt; es un lenguaje de serialización de datos, diseñado para ser legible tanto por software como por humanos y es el lenguaje que utiliza por defecto Pandoc para manipular metadatos. Se puede utilizar dentro de un archivo markdown pero también como un archivo independiente. En este último caso, el archivo tiene la extensión &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matadata.yaml&lt;/code&gt;, por ejemplo). Para nuestro caso, lo integraremos dentro de nuestro archivo markdown. Un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml block&lt;/code&gt; se escribe al principio del archivo markdown, utilizando tres guiones para encapsularlo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: mi libro
author: yo mismo
date: 07-28-2020
---

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Este sería el ejemplo más elemental. A partir de esta información, pandoc puede poblar las etiquetas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author&lt;/code&gt; en el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header&lt;/code&gt; y también podrá utilizar esta información para crear un bloque de título en HTML con el título del documento, el autor, y la fecha en que fue creado. ¿Por que es bueno que hagamos esto? Porque la información que incluyamos en la cabecera del documento HTML una vez sea accesible en la web, es la información que utilizará el motor de búsqueda para indexar el documento. Una página web sin metadata es una página web invisible.&lt;/p&gt;

&lt;p&gt;De la misma manera, Pandoc utiliza la metadata que especifiquemos para incorporarla en el archivo epub, de manera que luego esté disponible para que el dispositivo pueda mostrárnosla (en la biblioteca del aparato, por ejemplo).&lt;/p&gt;

&lt;p&gt;En síntesis, Yaml es una manera de mapear etiquetas o variables con valores.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; (etiqueta) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;: Mío Cid Campeador&lt;/code&gt; (valor asignado a esa etiqueta)&lt;/p&gt;

&lt;p&gt;Hay que notar que no hace falta utilizar comillas. Pero si el valor que estamos asignando contiene comillas (o cualquier caracter especial) es mejor entrecomillarlo (y utilizar las comillas simples para el texto que estamos asignando):&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title: &quot;Mío Cid Campeador, una &apos;relectura&apos; de la historia del Cid&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;También es importante tener en cuenta que Yaml es una manera de estructurar datos, no un lenguaje reservado o una especificación para expresar esos datos. Lo que significa que en realidad podemos utilizar las etiquetas o variables que necesitemos de manera arbitraria. Pandoc puede interpretar un conjunto importante de etiquetas, pero si nos parece insuficiente, podemos editar las plantillas y utilizar las que necesitemos (de esto hablaremos más adelante)&lt;/p&gt;

&lt;p&gt;Ahora volvamos a nuestro libro. En la misma carpeta donde tenemos el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidCampeador.md&lt;/code&gt; vamos a crear un nuevo archivo y le vamos a llamar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;metadata.yaml&lt;/code&gt;. En el vamos a escribir lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: Mío Cid Campeador
subtitle: Hazaña
author: Vicente Huidobro
creator:
- role: editor
  text: Lucho Tapia

identifier:
- scheme: ISBN-13
  text: 978-84-939173-9-5

date: 2020-04-07

description: &quot;Publicada en Madrid en 1931, esta novela de Huidobro es una réplica del clásico Cantar De Mío Cid, en la que propone una reinvención del mítico héroe medieval español. A partir de una conversación con el actor norteamericano Douglas Fairbanks, quien lo entusiasma con la figura del Cid y le pide una recopilación de datos, el poeta se documenta abundantemente y descubre, en su propia genealogía, un lejano vínculo con el legendario Rodrigo. La fascinación crece y Huidobro, a su manera se reencarna en él, se viste con su armadura y se lanza en esta epopeya por los campos de batalla de la creación, derribando, una vez más, las rigideces expresivas contra las que siempre luchó y logrando una narración de vanguardia. Huidobro legitima su relato, tal como él mismo lo señala en el prefacio, como &apos;la verdadera historia del Mío Cid Campeador, escrita por el último de sus descendientes&apos;&quot;

publisher: La Vorágine
keywords: literatura chilena, surrealismo, creacionismo, literatura contemporanea
rights: © 2020 La vorágine, CC BY-NC
lang: es-ES
cover-image: ../imagenes/el_mio_cid_campeador.jpg
css: ../epub/style.css
toc: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lo guardamos y luego volvemos al Power Shell y escribimos:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc MioCidCampeador.md metadata.yaml -f markdown -s -t html -o MioCidCampeador.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;y lo que obtendremos será esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/html_con_metadata_en_head.png&quot; alt=&quot;metadata incluida en html via yaml file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nótese que también podemos generar un archivo epub:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc MioCidCampeador.md metadata.yaml -f markdown -s -t epub3 -o MioCidCampeador.epub&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;y el resultado (si abrimos el epub y miramos en el archivo content.opf ):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/epub_metadata_via_yaml.png&quot; alt=&quot;epub metadata via yaml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En primer caso (conversión a html) pandoc creaba etiquetas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;meta name=&quot;&lt;/code&gt;etiqueta&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot; content=&quot;&lt;/code&gt;valor_de_la_etiqueta&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot; /&amp;gt;&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;meta name=&quot;author&quot; content=&quot;Vicente Huidobro&quot; /&amp;gt;&lt;/code&gt;), que es la manera standar para incluir metadata en html para la web. En el segundo caso, Pandoc introdujo la metadata utilizando los cuatro vocabularios reservados para metadata en la especificación epub3 (dcterms, marc relators, media y onix). Todo partiendo de un mismo archivo.&lt;/p&gt;

&lt;p&gt;Más adelante veremos otros usos de Yaml y volveremos sobre la generación de Epubs.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Proyectos" /><summary type="html">Formatear Preparar el MS De momento tenemos una carpeta, una serie de subcarpetas, y un único archivo. Pero, ¿no íbamos a partir desde markdown? En efecto. Por tanto, lo primero que haremos será convertir el documento base mioCidFinal.docx&apos; a markdown. Y aquí es dónde entra Pandoc. Pandoc es un software de linea de comandos (CLI), creado y mantenido por John MacFarlane, profesor de Filosofía en la Universidad de California en Berkeley. Muy brevemente, se puede describir como un conversor universal de formatos de texto. Pero es mucho más. Y puesto que fue concebido por un académico y con el objetivo de servir de herramientas a académicos, cuenta entre sus virtudes la capacidad de manejar metadata, referencias bibliograficas y sistemas de citación que mejoran casi cualquier herramienta dedicada a estas tareas. Hablaremos más adelante más en detalles de qué hace y cómo lo hace, de momento (y como demostración de lo que es capaz), vamos a navegar a la carpeta src, que contiene el documento mioCidFinal.docx y vamos a abrir la línea de comandos ahí. En Windows, sencillamente hay que abrir la carpeta correspondiente y hacer click en Archivo &amp;gt; abrir Windows Power Shell: y cuando se abra el Power Shell, vamos a escribir: pandoc mioCidFinal.docx -f docx+empty_paragraphs -t markdown --wrap=none --atx -o mioCidCampeador.md Si ahora miramos de nuevo en la carpeta, veremos que un nuevo archivo (mioCidCampeador.md) ha aparecido en ella. ¿Qué hemos hecho? Paso por paso, es lo siguiente: hemos invocado el programa que vamos a utilizar (pandoc) le hemos dicho a qué archivo tiene que aplicar las opciones que vamos a definir (mioCidFinal.docx) le hemos dicho desde qué formato tiene que partir y cómo tratarlo: -f, de from, desde, en inglés; docx, es el formato de partida; la opción empty_paragraphs le dice a Pandoc que queremos que limpie el archivo de todas las líneas vacías. Pandoc va a preservar todos los estilos predeterminados (encabezados) y estilos locales (itálicas y negritas), traduciéndolos a etiquetas en markdown, pero va a ignorar todos los estilos personalizados que hubiéramos podido definir en el documento (en caso de que quisieramos conservar los estilos personalizados de word, hay una opción: +styles). le hemos dicho a qué formato tiene que convertir el documento: -t markdown, a markdown. Le hemos dicho que elimine el ajuste de línea (word wrap) o saltos de línea no semánticos: wrap=none Que uniforme los encabezados (markdown tiene dos maneras de etiquetar encabezados, atx o setext-style headers): --atx y que con toda esta información, cree un archivo llamado mioCidCampeador.md Pandoc ha hecho todo eso en un par de segundos. Markdown Ahora podemos abrir el directorio de nuestro proyecto con nuestro editor de texto y veremos el árbol de carpetas: Abrimos el archivo mioCidCampeador.md (doble click en el panel de la derecha) y podemos ver lo que pandoc ha hecho. Los encabezados están correctamente distribuidos a lo largo del documento, el formato local se ha preservado. Incluso, podemos ver que Pandoc ha interpretado una tabla en el documento Word y la ha trasladado a markdown correctamente: Como en cualquier manuscrito, es probable que halla numerosas correcciones que hacer, pero aquí tenemos una buena base. Volveremos al tema de las correcciones más adelante De momento, vamos a sumir que la conversión fue exitosa. Podemos abrir el Outline del documento y verificar la estructura del documento, eso es ahora lo que más nos importa. Markdown tiene una sintaxis extremadamente sencilla de aprender. Si miramos el documento, podemos ver que: los encabezados están marcados por hashes (#): # este es un título de primer nivel, ## este es un título de segundo nivel, etc… las itálicas corresponden a las palabras (o frases) encerradas entre dos asteriscos (palabra_italicas) y que las negritas lo están entre dos asteriscos (esta_es_una_palabra_en_negritas). Las tablas se construyen con una combinación de guiones y barras verticales. Las listas numeradas, con el número, un punto y un espacio (1. item_de_lista) y las listas sin numerar con guión y espacio (- item_de_lista_sin_numerar) Para una referencia de la sintaxis markdown, aquí está la página de referencia. Generar HTML a partir de Markdown En un archivo HTML o EPUB (que en términos muy bastos no es otra cosa que un conjunto de archivos HTML: algo así como una página web comprimida y preparada para que la lea un dispositivo especializado) podemos distinguir dos secciones diferenciadas: el elemento head y el elemento body. El body es el contenido que es renderizado por un navegador (o por un software de lectura, en el caso de un archivo ‘epub’) y se muestra en la pantalla del dispositivo. El elemento ‘head’ en cambio contiene todo lo que necesita saber el software que va a renderizar la página para mostrarla correctamente: &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&quot;en&quot; dir=&quot;ltr&quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;title&amp;gt;mi libro&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt; Este es el título del documento&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt; y aqui viene el cuerpo de texto&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Este ejemplo muestra cómo se estructura un archivo ‘html’ muy básico. Pandoc es capaz de convertir un archivo markdown a HTML, incluyendo en éste toda la estructura semántica que hemos añadido al texto. Si convertimos el archivo del Mio Cid Campeador a HTML utilizando Pandoc (lo podemos hacer situándonos con el Power Shell en la carpeta donde está el archivo markdown y escribiendo: pandoc MioCidCampeador.md -f markdown -t html -o MioCidCampeador.html), va a convertir el archivo de esta manera: &amp;lt;h2 id=&quot;nota-de-los-editores1&quot;&amp;gt;Nota de los editores&amp;lt;a href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;No necesitamos presentar al público a Vicente Huidobro, poeta de fama mundial y que fue el iniciador de la mas nueva modalidad poética. De él nacieron el creacionismo y el ultraísmo y muchos otros &amp;lt;em&amp;gt;ismos&amp;lt;/em&amp;gt; más o menos legítimos que corren por el mundo.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Después de cuatro años de silencio, en que tal vez asqueado del ambiente y la vida literaria el poeta se refugió en sí mismo, hoy sale otra vez al público y se presenta con una obra maestra. Maestra por su fuerza lírica, por su fuerza de pasión, por su originalidad de fondo y forma.&amp;lt;/p&amp;gt; ¿Donde está el elemnto head? Lo que ha hecho Pandoc es convertir a etiquetas HTML todo el documento markdown, pero dado que no le hemos dicho explícitamente que queríamos un documento independiente, con sus elementos head y body, no lo ha hecho. Esto puede parecer una limitación, pero en efecto es extremadamente útil cuando lo que queremos es sencillamente HTML puro para insertarlo en otro documento. Para que haga el trabajo completo, tenemos que agregar la opción -s (por standalone, lo que a pandoc le dice que lo queremos es un documento independiente). Si ahora reescribimos la orden: pandoc MioCidCampeador.md -f markdown -s -t html -o MioCidCampeador.html, van a pasar dos cosas: Pandoc va a crear el documento de la manera que esperamos: &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt; &amp;lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&amp;gt; &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&amp;gt; &amp;lt;title&amp;gt;MioCidCampeador&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;} &amp;lt;/style&amp;gt; &amp;lt;!--[if lt IE 9]&amp;gt; &amp;lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;![endif]--&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h2 id=&quot;nota-de-los-editores1&quot;&amp;gt;Nota de los editores&amp;lt;a href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;No necesitamos presentar al público a Vicente Huidobro, poeta de fama mundial y que fue el iniciador de la mas nueva modalidad poética. De él nacieron el creacionismo y el ultraísmo y muchos otros &amp;lt;em&amp;gt;ismos&amp;lt;/em&amp;gt; más o menos legítimos que corren por el mundo.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Después de cuatro años de silencio, en que tal vez asqueado del ambiente y la vida literaria el poeta se refugió en sí mismo, hoy sale otra vez al público y se presenta con una obra maestra. Maestra por su fuerza lírica, por su fuerza de pasión, por su originalidad de fondo y forma.&amp;lt;/p&amp;gt; 2) Y nos va a arrojar un mensaje de error: [WARNING] This document format requires a nonempty &amp;lt;title&amp;gt; element. Defaulting to &apos;MioCidCampeador&apos; as the title. To specify a title, use &apos;title&apos; in metadata or --metadata title=&quot;...&quot;. Este mensaje significa que Pandoc ha sido capaz de crear el documento, pero dado que no le hemos indicado qué metadata utilizar, lo ha construido a partir de sus valores por defecto. Como, según la especificación, lo único imprescindible es que un documento tenga un título, Pandoc ha creado un título a partir del nombre del archivo. Metadata Ya sabemos como Pandoc puede convertir automáticamente un documento markdown a HTML (sobre cómo se convierte a EPUB, lo veremos más adelante, pero el principio es el mismo). Lo que necesitamos ahora es aprender a alimentar a Pandoc con metadata para que este pueda escribirla en HTML (y en epub). Existen varias maneras de preparar un archivo de metadata, la manera más simple es incluirla dentro del archivo markdown utilizando un yaml block. Yaml es un lenguaje de serialización de datos, diseñado para ser legible tanto por software como por humanos y es el lenguaje que utiliza por defecto Pandoc para manipular metadatos. Se puede utilizar dentro de un archivo markdown pero también como un archivo independiente. En este último caso, el archivo tiene la extensión .yaml (matadata.yaml, por ejemplo). Para nuestro caso, lo integraremos dentro de nuestro archivo markdown. Un yaml block se escribe al principio del archivo markdown, utilizando tres guiones para encapsularlo: --- title: mi libro author: yo mismo date: 07-28-2020 --- Este sería el ejemplo más elemental. A partir de esta información, pandoc puede poblar las etiquetas title y author en el header y también podrá utilizar esta información para crear un bloque de título en HTML con el título del documento, el autor, y la fecha en que fue creado. ¿Por que es bueno que hagamos esto? Porque la información que incluyamos en la cabecera del documento HTML una vez sea accesible en la web, es la información que utilizará el motor de búsqueda para indexar el documento. Una página web sin metadata es una página web invisible. De la misma manera, Pandoc utiliza la metadata que especifiquemos para incorporarla en el archivo epub, de manera que luego esté disponible para que el dispositivo pueda mostrárnosla (en la biblioteca del aparato, por ejemplo). En síntesis, Yaml es una manera de mapear etiquetas o variables con valores. title (etiqueta) : Mío Cid Campeador (valor asignado a esa etiqueta) Hay que notar que no hace falta utilizar comillas. Pero si el valor que estamos asignando contiene comillas (o cualquier caracter especial) es mejor entrecomillarlo (y utilizar las comillas simples para el texto que estamos asignando): title: &quot;Mío Cid Campeador, una &apos;relectura&apos; de la historia del Cid&quot; También es importante tener en cuenta que Yaml es una manera de estructurar datos, no un lenguaje reservado o una especificación para expresar esos datos. Lo que significa que en realidad podemos utilizar las etiquetas o variables que necesitemos de manera arbitraria. Pandoc puede interpretar un conjunto importante de etiquetas, pero si nos parece insuficiente, podemos editar las plantillas y utilizar las que necesitemos (de esto hablaremos más adelante) Ahora volvamos a nuestro libro. En la misma carpeta donde tenemos el archivo mioCidCampeador.md vamos a crear un nuevo archivo y le vamos a llamar metadata.yaml. En el vamos a escribir lo siguiente: --- title: Mío Cid Campeador subtitle: Hazaña author: Vicente Huidobro creator: - role: editor text: Lucho Tapia identifier: - scheme: ISBN-13 text: 978-84-939173-9-5 date: 2020-04-07 description: &quot;Publicada en Madrid en 1931, esta novela de Huidobro es una réplica del clásico Cantar De Mío Cid, en la que propone una reinvención del mítico héroe medieval español. A partir de una conversación con el actor norteamericano Douglas Fairbanks, quien lo entusiasma con la figura del Cid y le pide una recopilación de datos, el poeta se documenta abundantemente y descubre, en su propia genealogía, un lejano vínculo con el legendario Rodrigo. La fascinación crece y Huidobro, a su manera se reencarna en él, se viste con su armadura y se lanza en esta epopeya por los campos de batalla de la creación, derribando, una vez más, las rigideces expresivas contra las que siempre luchó y logrando una narración de vanguardia. Huidobro legitima su relato, tal como él mismo lo señala en el prefacio, como &apos;la verdadera historia del Mío Cid Campeador, escrita por el último de sus descendientes&apos;&quot; publisher: La Vorágine keywords: literatura chilena, surrealismo, creacionismo, literatura contemporanea rights: © 2020 La vorágine, CC BY-NC lang: es-ES cover-image: ../imagenes/el_mio_cid_campeador.jpg css: ../epub/style.css toc: true --- Lo guardamos y luego volvemos al Power Shell y escribimos: pandoc MioCidCampeador.md metadata.yaml -f markdown -s -t html -o MioCidCampeador.html y lo que obtendremos será esto: Nótese que también podemos generar un archivo epub: pandoc MioCidCampeador.md metadata.yaml -f markdown -s -t epub3 -o MioCidCampeador.epub y el resultado (si abrimos el epub y miramos en el archivo content.opf ): En primer caso (conversión a html) pandoc creaba etiquetas &amp;lt;meta name=&quot;etiqueta&quot; content=&quot;valor_de_la_etiqueta&quot; /&amp;gt; (&amp;lt;meta name=&quot;author&quot; content=&quot;Vicente Huidobro&quot; /&amp;gt;), que es la manera standar para incluir metadata en html para la web. En el segundo caso, Pandoc introdujo la metadata utilizando los cuatro vocabularios reservados para metadata en la especificación epub3 (dcterms, marc relators, media y onix). Todo partiendo de un mismo archivo. Más adelante veremos otros usos de Yaml y volveremos sobre la generación de Epubs.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/leaves.jpg" /><media:content medium="image" url="http://localhost:4000/leaves.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Edición sostenible con pandoc, markdown y git. Parte 2: Objetivo, herramientas &amp;amp; requisitos</title><link href="http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-2/" rel="alternate" type="text/html" title="Edición sostenible con pandoc, markdown y git. Parte 2: Objetivo, herramientas &amp;amp; requisitos" /><published>2020-08-21T20:00:00-04:00</published><updated>2020-08-21T20:00:00-04:00</updated><id>http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-2</id><content type="html" xml:base="http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-2/">&lt;p&gt;El propósito de este tutorial será mostrar desde un punto de vista práctico como combinar herramientas para crear un libro multiformato, de una mera sostenible y automatizada, y que, de paso, resuelve punto por punto nuestro problema..&lt;/p&gt;

&lt;p&gt;Este es únicamente un posible &lt;em&gt;workflow&lt;/em&gt; y desde luego que existen muchas otras herramientas y combinaciones. El punto que espero demostrar es únicamente la cantidad de herramientas que existen a nuestra disposición, que pueden transformar el proceso de producción de un libro hasta el punto de permitirnos automatizar todas las tareas, ganando en eficiencia y al mismo tiempo en control sobre nuestros proyectos.&lt;/p&gt;

&lt;p&gt;Para mostrar esto, voy a replantear mi proyecto (la edición de &lt;em&gt;Mío cid campeador&lt;/em&gt; de Vicente Huidobro) y rehacerlo desde el principio. Para ello:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Crearemos, a partir de los archivos que tenemos, un set de archivos fuente en markDown (texto plano con la extensión &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Luego crearemos un repositorio para albergar los archivos necesarios&lt;/li&gt;
  &lt;li&gt;Crearemos un archivo formateado en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml&lt;/code&gt; para almacenar la metadata del libro&lt;/li&gt;
  &lt;li&gt;Pondremos este repositorio (el directorio donde vive nuestro proyecto) bajo control de versiones con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Sincronizaremos este repositorio local con un repositorio remoto en GitHub&lt;/li&gt;
  &lt;li&gt;Utilizando pandoc, crearemos nuestro Epub, y crearemos un archivo ICML para importarlo en inDesign&lt;/li&gt;
  &lt;li&gt;Crearemos desde InDesign el PDF final de imprenta&lt;/li&gt;
  &lt;li&gt;Veremos como hacer correcciones, manteniendo un único set de archivos fuente y guardando un registro histórico de correcciones.&lt;/li&gt;
  &lt;li&gt;y por último, crearemos una página web con los archivos de nuestro libro.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;21-requisitos&quot;&gt;2.1 Requisitos&lt;/h3&gt;

&lt;p&gt;Para seguir este tutorial, es aconsejable (aunque no indispensable):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alguna familiaridad con la línea de comandos.&lt;/li&gt;
  &lt;li&gt;Tener conocimientos básicos de HTML y CSS.&lt;/li&gt;
  &lt;li&gt;Un conocimientos de InDesign a nivel de diseño editorial.&lt;/li&gt;
  &lt;li&gt;Una mente abierta (todo lo anterior se puede reemplazar con una aplicada búsqueda en Google, esto último no).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;23-herramientas--software&quot;&gt;2.3 Herramientas &amp;amp; software&lt;/h3&gt;

&lt;p&gt;Y deberemos tener instalado en nuestro PC:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Un editor de texto plano (no procesador de texto): yo utilizaré Atom, pero hay una serie de editores de texto igualmente útiles y libres (Visual Studio Code, Sublime Text, Vim, etc…)&lt;/li&gt;
  &lt;li&gt;Línea de comandos (en Windows, el PowerShell; en Linux, el terminal o uno cualquiera de sus emuladores; en Mac, la terminal).&lt;/li&gt;
  &lt;li&gt;Pandoc&lt;/li&gt;
  &lt;li&gt;InDesign&lt;/li&gt;
  &lt;li&gt;Git y el cliente de escritorio de GitHub&lt;/li&gt;
  &lt;li&gt;MS Word&lt;/li&gt;
  &lt;li&gt;Jeckyll&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instalar software es tedioso. De momento, vamos a sumir que (como yo) tenéis todo el software instalado en vuestro ordenador.&lt;/p&gt;

&lt;p&gt;Y dado que de lo que se trata es de probar algo distinto (no se puede esperar un resultado diferente si hacemos lo mismo), vamos a cambiar nuestro enfoque y utilizar Markdown como formato base, en lugar del consabido MS Word. Las razones para escoger markdown son exactamente las mismas que para desechar MS Word y se pueden resumir en los tres mantras de cualquier workflow editorial en un entorno digital:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;estructura&lt;/li&gt;
  &lt;li&gt;sostenibilidad&lt;/li&gt;
  &lt;li&gt;interoperatividad&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Necesitamos un archivo bien estructurado. Esto garantiza que pueda ser mapeado correctamente para la importación en InDesign, que se pueda generar un epub automáticamente, y que este epub, tal cual ha sido exportado por pandoc, sea accesible.&lt;/p&gt;

&lt;p&gt;El hecho de que trabajemos en texto plano (markdown más que un formato, es una convención para etiquetar texto plano), garantiza que estos archivos sean legibles por cualquier ordenador, sea cual sea el sistema operativo y el software que tengan instalado, ahora, hace treinta años o en el siglo XXII. Además, son tan interpretables por máquinas como legibles por humanos, y pesan ridículamente poco comparados con sus colegas con ínfulas, los archivos generados por procesadores de texto como MS Word o Open Office.&lt;/p&gt;

&lt;p&gt;Y por estas razones, son también fácilmente trasladables (de una maquina a otra, de un software a otro, de un lenguaje de etiquetado a otro). Si el archivo está bien estructurado, podemos hacer en efecto lo que queramos con él.&lt;/p&gt;

&lt;p&gt;Manos a la obra.&lt;/p&gt;

&lt;h3 id=&quot;configurar-el-espacio-de-trabajo&quot;&gt;Configurar el espacio de trabajo&lt;/h3&gt;

&lt;p&gt;Lo primero será crear el directorio donde van a vivir los archivos de mi proyecto. En mi ordenador será la carpeta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidCampeador&lt;/code&gt;. Dentro de esta carpeta, además crearé una carpeta para las imágenes, otra para los archivos markdown y una última que llamaré &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; (por “source”: el archivo fuente o archivo base). para ello, nos situamos con el terminal en el directorio donde queremos crear la carpeta de nuestro proyecto), y escribimos:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir mioCidCampeador
cd mioCidCampeador
mkdir imagenes, markdown, src, indd, icml,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Naturalmente, también se puede crear la carpeta haciendo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click derecho &amp;gt; crear carpeta&lt;/code&gt;, pero para los propósitos de este tutorial, utilizaremos la línea de comandos: es más rápido y de esta manera nos familiarizamos con su uso.&lt;/p&gt;

&lt;p&gt;Una vez creada nuestra carpeta, podemos poner nuestro documento (si: mioCidFinal.docx) en la carpeta correspondiente (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;). Este es el punto de partida de nuestro proyecto.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="edicion digital" /><category term="Proyectos" /><summary type="html">El propósito de este tutorial será mostrar desde un punto de vista práctico como combinar herramientas para crear un libro multiformato, de una mera sostenible y automatizada, y que, de paso, resuelve punto por punto nuestro problema..</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/flower2.jpeg" /><media:content medium="image" url="http://localhost:4000/flower2.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Edición sostenible con pandoc, markdown y git. Parte 1: El problema</title><link href="http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-1/" rel="alternate" type="text/html" title="Edición sostenible con pandoc, markdown y git. Parte 1: El problema" /><published>2020-08-18T20:00:00-04:00</published><updated>2020-08-18T20:00:00-04:00</updated><id>http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-1</id><content type="html" xml:base="http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-1/">&lt;p&gt;Supongamos que diez años atrás editamos y publicamos un libro, que ahora necesitamos reimprimir. Los archivos siguen almacenados en un disco duro, de modo que bastaría recuperarlos, abrirlos en InDesign, hacer las correcciones y ajustes que hiciesen falta, y volver a imprimir.&lt;/p&gt;

&lt;p&gt;En el disco duro encontramos la carpeta con el proyecto y dentro de esta carpeta, una subcarpeta llamada “tripa” donde efectivamente hay un archivo InDesign. Perfecto. El problema es que mi versión de InDesign decide que no es un archivo con quién quiera tener algún tipo de trato.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/noSePuedeAbrirElArchivoInDesign.png&quot; alt=&quot;InDesign no puede abrir el archivo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El mensaje no solo es desalentador, también es totalmente opaco. ¿Por qué no se puede abrir? ¿El archivo está corrupto? ¿Tiene que ver con la versión de InDesign que estoy usando? Ninguna pista. Podría probar utilizando la versión de InDesign con la que cree el archivo, pero, demonios, hace diez años de eso, ¿cuál podría haber sido? Sin contar con que tendría que descargarla e instalarla y sin ninguna garantía de que el asunto funcionase.&lt;/p&gt;

&lt;p&gt;Vamos, pues, al plan B. Que no es otro que localizar la última versión del manuscrito en MS en Word y rehacer la maqueta.&lt;/p&gt;

&lt;p&gt;El manuscrito en cuestión se produjo después de un laborioso escaneo: nada extraño considerando que la última edición del libro en cuestión era de hace unos treinta o cuarenta años atrás. Cualquiera que halla escaneado un libro sabe que los resultados distan mucho de definir la palabra prolijidad. El resultado: la corrección tomó un tiempo, primero utilizando herramientas automatizadas (regex, principalmente), y un trabajo denodado de nuestro corrector. Por tanto, el ir y venir de borradores por correo electrónico fue profuso.&lt;/p&gt;

&lt;p&gt;Considerando lo anterior, resulta natural (preocupante, pero natural) que cuando miramos en la carpeta que contiene los borradores, encontremos no uno sino una serie de archivos (versión2, versiónfinal, versión definitiva… espera, ¿”versiondefinitiva” es más final que “final” ¿o es al revés?). Siempre podemos buscar sencillamente la última versión del documento en MS Word y trabajar con esa. Pero, ¿es realmente la última o la corrección final fue hecha en InDesign? De ser así, posiblemente podríamos recuperar el log del control de cambios en InDesign… solo que no podemos. ¿O tal vez la revisión más reciente incluía cosas que descartamos en la versión final del libro? Es una posibilidad. De paso y ya que estamos, convendría también revisar los correos electrónicos con el corrector.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/phd101212s.gif&quot; alt=&quot;documento &amp;quot;final&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al final escogemos un archivo, y lo abrimos. Naturalmente, los encabezados brillan por su ausencia y después de echar un vistazo en el panel de estilos, sabemos que mapear esto e importarlo de alguna manera indolora en InDesign va a ser la más utópica de las proezas.&lt;/p&gt;

&lt;p&gt;Llegado a este punto, habrán pasado un par de horas y estaremos sentados frente al ordenador con deseos de tirarlo por la ventana y correr a ahogarnos de chupitos en algún antro infame.&lt;/p&gt;

&lt;h3 id=&quot;11&quot;&gt;1.1&lt;/h3&gt;

&lt;p&gt;Cosas como estas pasan todo el tiempo. Sean estos los problemas, u otros distintos, o una combinación variable de problemas conocidos y otros totalmente novedosos, la combinación MS Word + InDesign rara vez es indolora, sobre todo si consideramos documentos enviados por correctores o traductores o escritores: pueden lucir muy bien, pero rara vez están bien estructurados. Y la tentación del diseño (que es una especie de enfermedad que se apodera tarde o temprano de los usuarios de Word) termina por crear monstruos, para mayor horror de diseñadores y editores. Discutiremos esto en otro lugar, pero sí podemos mencionar rápidamente los problemas de MS Word:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nada sostenible (abrir un documento de una versión antigua de word y esperar que todo funcione es una operación que involucra una dosis importante de azar)&lt;/li&gt;
  &lt;li&gt;El código que genera es confuso y pesado&lt;/li&gt;
  &lt;li&gt;Su sistema de control de versiones es limitado (en funcionalidad y alcance)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y sin embargo, word es el estándar, lo cual no deja de resultar misterioso. ¿No hay otra manera de hacer las cosas? En efecto la hay. Pero aunque es más eficiente y fluida y nos abre numerosas posibilidades, por alguna razón nadie o casi nadie la utiliza. Ese es el camino que vamos a explorar. Lo que voy a proponer aquí es un flujo de trabajo digital, open source y sostenible, que en mi opinión resuelve muchos de los problemas del workflow tradicional, cuyo principal defecto es que está orientado primariamente a la producción de un material impreso en un entorno digital. Con esto, desde luego, no quiero insinuar que tengo algo en contra del libro impreso, sino más bien que es posible &lt;em&gt;también&lt;/em&gt; hacer libros impresos bellamente formateados partiendo de un concepto de producción puramente digital.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Proyectos" /><summary type="html">Supongamos que diez años atrás editamos y publicamos un libro, que ahora necesitamos reimprimir. Los archivos siguen almacenados en un disco duro, de modo que bastaría recuperarlos, abrirlos en InDesign, hacer las correcciones y ajustes que hiciesen falta, y volver a imprimir.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/bright-flowers.jpg" /><media:content medium="image" url="http://localhost:4000/bright-flowers.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>