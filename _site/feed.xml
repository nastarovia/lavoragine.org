<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-06-16T16:53:40+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">La voragine</title><subtitle>LaVoragine.org es una editorial &amp; un laboratorio de edición digital.
</subtitle><author><name>la Vorágine</name></author><entry><title type="html">Crear un ebook con audio incorporado</title><link href="http://localhost:4000/crear-un-ebook-con-audio-incorporado/" rel="alternate" type="text/html" title="Crear un ebook con audio incorporado" /><published>2022-06-15T00:00:00+02:00</published><updated>2022-06-15T00:00:00+02:00</updated><id>http://localhost:4000/crear-un-ebook-con-audio-incorporado</id><content type="html" xml:base="http://localhost:4000/crear-un-ebook-con-audio-incorporado/">&lt;p&gt;Mi objetivo era añadir a la versión en epub del libro “La misteriosa maternidad del verso” (que recoge tres conferencias de Gabriela Mistral, Juana de Ibarbourou, y Alfonsina Storni) los audios existentes de las grabaciones originales de las conferencias.  La calidad de las grabaciones es miserable, pero como documento tienen un valor. Son emocionantes, vaya. La cuestión es cómo incorporarlas en un libro electrónico.&lt;/p&gt;

&lt;p&gt;Vamos a ello.&lt;/p&gt;

&lt;p&gt;Mi workflow habitual es crear los libros electrónicos partiendo del texto formateado en  Markdown. Markdown es un formato de marcado ligero (o mejor: una convención de marcado), que permite escribir HTML utilizando marcas muy fáciles de aprender. Si combinamos los archivos en markdown con la metadata formateada en YAML (que es un formato de serialización de datos, que nos permite tabular información sobre los libros para utilizar en otras herramientas) y con Pandoc para realizar la conversión, tenemos que con una instrucción podemos generar un libro electrónico en formato Epub3.&lt;/p&gt;

&lt;p&gt;El primer problema es que markdown no incluye en su sintaxis un procedimiento para marcar archivos de audio. Una opción es marcarlos como links que vinculen a una carpeta con los audios en mp3. Pero no funciona. Cuando convertimos el markdown en epub, el link está correctamente escrito, pero no hay nada en la carpeta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audio&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/audio_export_via_pandoc.png&quot; alt=&quot;exportar audio con Pandoc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una forma de resolver el problema es renunciar a añadir el audio en este paso y agregarlo al Epub una vez lo hallamos convertido utilizando Sigil. En este caso lo que hice fueron cinco cosas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Abrir el Epub generado con  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc&lt;/code&gt; en sigil&lt;/li&gt;
  &lt;li&gt;Añadir los archivos de audio (en MP3) directamente en la carpeta Audio:  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add existing files&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + click&lt;/code&gt; en mac, click derecho en un PC),  seleccionar los archivos y aceptar. Veremos cómo en la carpeta de audio de sigil tenemos los tres archivos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sigil_audio_folder.png&quot; alt=&quot;carpetas en sigil&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Crear un archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playlist.xhtml&lt;/code&gt; para listar las grabaciones, con la siguiente estructura:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;body&amp;gt;
  &amp;lt;section epub:type=&quot;backmatter loa&quot;&amp;gt;
	
  &amp;lt;!–– el `epub-type=&quot;loa&quot;` significa &quot;List of Audios&quot; y es lo que va al caso.--&amp;gt;
	
  &amp;lt;h1 class=&quot;playlist&quot;&amp;gt;Playlist&amp;lt;/h1&amp;gt;
	
  &amp;lt;!–– Aquí creamos el contenedor para el primer track--&amp;gt;
	
  &amp;lt;div class=&quot;playlist&quot;&amp;gt;
  &amp;lt;hr class=&quot;sepBar&quot;/&amp;gt;
  &amp;lt;table class=&quot;playlist&quot;&amp;gt;
  &amp;lt;tbody&amp;gt;&amp;lt;tr class=&quot;playlist&quot; id=&quot;track01&quot;&amp;gt;
      &amp;lt;td class=&quot;playlist&quot;&amp;gt;
          &amp;lt;div class=&quot;playlist&quot;&amp;gt;
          &amp;lt;p class=&quot;playlist&quot;&amp;gt;
          &amp;lt;span class=&quot;trackNumber&quot;&amp;gt;01 &amp;lt;/span&amp;gt;
          &amp;lt;span class=&quot;trackTitle&quot;&amp;gt;&amp;lt;a href=&quot;ch002.xhtml&quot;&amp;gt;Casi en pantuflas / Juana de Ibarbourou&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
          &amp;lt;span class=&quot;trackDuration&quot;&amp;gt;(22&apos; 58&quot;)&amp;lt;/span&amp;gt;
          &amp;lt;/p&amp;gt;
          &amp;lt;audio class=&quot;playlist&quot; src=&quot;../audio/juana_de_ibarbourou.mp3&quot; controls=&quot;controls&quot;&amp;gt;Tu aparato no admite audio&amp;lt;/audio&amp;gt;
            
  &amp;lt;!–– Aquí, cuidado: hay un bug en sigil que hace que insertando el  link al archivo de sonido con el menu `insert &amp;gt; file` ponga `../Audio` con minúsculas cuando debe ir en minúsculas --&amp;gt;
	 
          &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
  &amp;lt;tr class=&quot;playlist&quot;&amp;gt;
      &amp;lt;td class=&quot;playlist&quot;&amp;gt;
          &amp;lt;span class=&quot;trackTitle&quot;&amp;gt;Duración total: 22&apos; 58&quot;&amp;lt;/span&amp;gt;
      &amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Y luego, crear links en los capítulos correspondientes a cada una de las conferencias vinculados con la lista de archivos de audio.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p class=&quot;nav_bar&quot;&amp;gt;&amp;lt;a href=&quot;playlist.xhtml#track01&quot;&amp;gt;[Escuchar]&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Por último, es buena idea añadir la metadata pertinente. Para eso, hay que abrir el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content.opf&lt;/code&gt; y escribir (antes del cierre de la etiqueta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/metadata&amp;gt;&lt;/code&gt;), la metadata relativa a accesibilidad:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;meta property=&quot;schema:accessibilityFeature&quot;&amp;gt;alternativeText&amp;lt;/meta&amp;gt;
  &amp;lt;meta property=&quot;schema:accessibilityFeature&quot;&amp;gt;readingOrder&amp;lt;/meta&amp;gt;
  &amp;lt;meta property=&quot;schema:accessibilityFeature&quot;&amp;gt;structuralNavigation&amp;lt;/meta&amp;gt;
  &amp;lt;meta property=&quot;schema:accessibilityFeature&quot;&amp;gt;tableOfContents&amp;lt;/meta&amp;gt;
  &amp;lt;meta property=&quot;schema:accessibilitySummary&quot;&amp;gt;The publication has been evaluated 
   for accessibility.&amp;lt;/meta&amp;gt;
  &amp;lt;meta property=&quot;schema:accessibilityHazard&quot;&amp;gt;none&amp;lt;/meta&amp;gt;
  &amp;lt;meta property=&quot;schema:accessMode&quot;&amp;gt;textual&amp;lt;/meta&amp;gt;
  &amp;lt;meta property=&quot;schema:accessMode&quot;&amp;gt;visual&amp;lt;/meta&amp;gt;
  &amp;lt;meta property=&quot;schema:accessMode&quot;&amp;gt;auditory&amp;lt;/meta&amp;gt;
  &amp;lt;meta property=&quot;schema:accessModeSufficient&quot;&amp;gt;textual&amp;lt;/meta&amp;gt;
  &amp;lt;meta property=&quot;schema:accessibilityControl&quot;&amp;gt;fullKeyboardControl&amp;lt;/meta&amp;gt;
  &amp;lt;meta property=&quot;schema:accessibilityControl&quot;&amp;gt;fullMouseControl&amp;lt;/meta&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una vez añadidos y vinculados todos los audios, es una buena idea validar el archivo. Primero con  &lt;a href=&quot;https://www.w3.org/publishing/epubcheck/&quot;&gt;epub-check&lt;/a&gt; , el validador de archivos Epub3 del W3C. Y luego con &lt;a href=&quot;https://daisy.org/activities/software/ace/&quot;&gt;Ace&lt;/a&gt;, el validador dedicado a evaluar la accesibilidad de los archivos epub. En este caso, me arrojó un montón de advertencias que en su mayoría tenían que ver con la ausencia de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aria-roles&lt;/code&gt;, lo que se arregla con un poco de regex (a cada &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epub type&lt;/code&gt; le corresponde un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aria role&lt;/code&gt;: la lista de equivalencias se puede consultar &lt;a href=&quot;https://idpf.github.io/epub-guides/epub-aria-authoring/&quot;&gt;aquí&lt;/a&gt;). Un ejemplo:&lt;/p&gt;

&lt;p&gt;buscar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epub:type=&quot;footnote&quot;&lt;/code&gt;
y reemplazar por: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epub:type=&quot;noteref&quot; role=&quot;doc-footnote&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Y así hasta arreglar cada una de las advertencias.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ace_output.png&quot; alt=&quot;Ace: aplicación para evaluar la accesibilidad en archivos Epub&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Con esto, tenemos un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epub&lt;/code&gt; con texto y audio vinculado, accesible y listo para usar. 
Se puede descargar una muestra del libro &lt;a href=&quot;https://github.com/lavoragine/la_misteriosa_maternidad_del_verso/releases/tag/demo&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Audiolibros" /><category term="Proyectos" /><category term="Epub3" /><summary type="html">Mi objetivo era añadir a la versión en epub del libro “La misteriosa maternidad del verso” (que recoge tres conferencias de Gabriela Mistral, Juana de Ibarbourou, y Alfonsina Storni) los audios existentes de las grabaciones originales de las conferencias. La calidad de las grabaciones es miserable, pero como documento tienen un valor. Son emocionantes, vaya. La cuestión es cómo incorporarlas en un libro electrónico. Vamos a ello. Mi workflow habitual es crear los libros electrónicos partiendo del texto formateado en Markdown. Markdown es un formato de marcado ligero (o mejor: una convención de marcado), que permite escribir HTML utilizando marcas muy fáciles de aprender. Si combinamos los archivos en markdown con la metadata formateada en YAML (que es un formato de serialización de datos, que nos permite tabular información sobre los libros para utilizar en otras herramientas) y con Pandoc para realizar la conversión, tenemos que con una instrucción podemos generar un libro electrónico en formato Epub3. El primer problema es que markdown no incluye en su sintaxis un procedimiento para marcar archivos de audio. Una opción es marcarlos como links que vinculen a una carpeta con los audios en mp3. Pero no funciona. Cuando convertimos el markdown en epub, el link está correctamente escrito, pero no hay nada en la carpeta audio : Una forma de resolver el problema es renunciar a añadir el audio en este paso y agregarlo al Epub una vez lo hallamos convertido utilizando Sigil. En este caso lo que hice fueron cinco cosas: Abrir el Epub generado con pandoc en sigil Añadir los archivos de audio (en MP3) directamente en la carpeta Audio: add existing files (ctrl + click en mac, click derecho en un PC), seleccionar los archivos y aceptar. Veremos cómo en la carpeta de audio de sigil tenemos los tres archivos. Crear un archivo playlist.xhtml para listar las grabaciones, con la siguiente estructura: &amp;lt;body&amp;gt; &amp;lt;section epub:type=&quot;backmatter loa&quot;&amp;gt; &amp;lt;!–– el `epub-type=&quot;loa&quot;` significa &quot;List of Audios&quot; y es lo que va al caso.--&amp;gt; &amp;lt;h1 class=&quot;playlist&quot;&amp;gt;Playlist&amp;lt;/h1&amp;gt; &amp;lt;!–– Aquí creamos el contenedor para el primer track--&amp;gt; &amp;lt;div class=&quot;playlist&quot;&amp;gt; &amp;lt;hr class=&quot;sepBar&quot;/&amp;gt; &amp;lt;table class=&quot;playlist&quot;&amp;gt; &amp;lt;tbody&amp;gt;&amp;lt;tr class=&quot;playlist&quot; id=&quot;track01&quot;&amp;gt; &amp;lt;td class=&quot;playlist&quot;&amp;gt; &amp;lt;div class=&quot;playlist&quot;&amp;gt; &amp;lt;p class=&quot;playlist&quot;&amp;gt; &amp;lt;span class=&quot;trackNumber&quot;&amp;gt;01 &amp;lt;/span&amp;gt; &amp;lt;span class=&quot;trackTitle&quot;&amp;gt;&amp;lt;a href=&quot;ch002.xhtml&quot;&amp;gt;Casi en pantuflas / Juana de Ibarbourou&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;trackDuration&quot;&amp;gt;(22&apos; 58&quot;)&amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;audio class=&quot;playlist&quot; src=&quot;../audio/juana_de_ibarbourou.mp3&quot; controls=&quot;controls&quot;&amp;gt;Tu aparato no admite audio&amp;lt;/audio&amp;gt; &amp;lt;!–– Aquí, cuidado: hay un bug en sigil que hace que insertando el link al archivo de sonido con el menu `insert &amp;gt; file` ponga `../Audio` con minúsculas cuando debe ir en minúsculas --&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr class=&quot;playlist&quot;&amp;gt; &amp;lt;td class=&quot;playlist&quot;&amp;gt; &amp;lt;span class=&quot;trackTitle&quot;&amp;gt;Duración total: 22&apos; 58&quot;&amp;lt;/span&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; Y luego, crear links en los capítulos correspondientes a cada una de las conferencias vinculados con la lista de archivos de audio. &amp;lt;p class=&quot;nav_bar&quot;&amp;gt;&amp;lt;a href=&quot;playlist.xhtml#track01&quot;&amp;gt;[Escuchar]&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; Por último, es buena idea añadir la metadata pertinente. Para eso, hay que abrir el archivo content.opf y escribir (antes del cierre de la etiqueta &amp;lt;/metadata&amp;gt;), la metadata relativa a accesibilidad: &amp;lt;meta property=&quot;schema:accessibilityFeature&quot;&amp;gt;alternativeText&amp;lt;/meta&amp;gt; &amp;lt;meta property=&quot;schema:accessibilityFeature&quot;&amp;gt;readingOrder&amp;lt;/meta&amp;gt; &amp;lt;meta property=&quot;schema:accessibilityFeature&quot;&amp;gt;structuralNavigation&amp;lt;/meta&amp;gt; &amp;lt;meta property=&quot;schema:accessibilityFeature&quot;&amp;gt;tableOfContents&amp;lt;/meta&amp;gt; &amp;lt;meta property=&quot;schema:accessibilitySummary&quot;&amp;gt;The publication has been evaluated for accessibility.&amp;lt;/meta&amp;gt; &amp;lt;meta property=&quot;schema:accessibilityHazard&quot;&amp;gt;none&amp;lt;/meta&amp;gt; &amp;lt;meta property=&quot;schema:accessMode&quot;&amp;gt;textual&amp;lt;/meta&amp;gt; &amp;lt;meta property=&quot;schema:accessMode&quot;&amp;gt;visual&amp;lt;/meta&amp;gt; &amp;lt;meta property=&quot;schema:accessMode&quot;&amp;gt;auditory&amp;lt;/meta&amp;gt; &amp;lt;meta property=&quot;schema:accessModeSufficient&quot;&amp;gt;textual&amp;lt;/meta&amp;gt; &amp;lt;meta property=&quot;schema:accessibilityControl&quot;&amp;gt;fullKeyboardControl&amp;lt;/meta&amp;gt; &amp;lt;meta property=&quot;schema:accessibilityControl&quot;&amp;gt;fullMouseControl&amp;lt;/meta&amp;gt; Una vez añadidos y vinculados todos los audios, es una buena idea validar el archivo. Primero con epub-check , el validador de archivos Epub3 del W3C. Y luego con Ace, el validador dedicado a evaluar la accesibilidad de los archivos epub. En este caso, me arrojó un montón de advertencias que en su mayoría tenían que ver con la ausencia de aria-roles, lo que se arregla con un poco de regex (a cada epub type le corresponde un aria role: la lista de equivalencias se puede consultar aquí). Un ejemplo: buscar epub:type=&quot;footnote&quot; y reemplazar por: epub:type=&quot;noteref&quot; role=&quot;doc-footnote&quot; Y así hasta arreglar cada una de las advertencias. Con esto, tenemos un epub con texto y audio vinculado, accesible y listo para usar. Se puede descargar una muestra del libro aquí.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/leaves.jpg" /><media:content medium="image" url="http://localhost:4000/leaves.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">La misteriosa maternidad del verso</title><link href="http://localhost:4000/la-misteriosa-maternidad-del-verso/" rel="alternate" type="text/html" title="La misteriosa maternidad del verso" /><published>2022-04-21T00:00:00+02:00</published><updated>2022-04-21T00:00:00+02:00</updated><id>http://localhost:4000/la-misteriosa-maternidad-del-verso</id><content type="html" xml:base="http://localhost:4000/la-misteriosa-maternidad-del-verso/">&lt;p&gt;El año 1938 el Ministerio de Educación (en esa época “de Instrucción”) de Uruguay organizó un curso de verano en Instituto Vázquez Acevedo. A una de las sesiones fueron invitadas las mayores exponentes de la poesía del cono sur de ese momento: Juana de Ibarbourou, de Uruguay; Alfonsina Storni, de Argentina y Gabriela Mistral, de Chile, para hablar de su labor poética y explicar cómo escribían sus versos.&lt;/p&gt;

&lt;p&gt;Se trata de textos fundacionales del feminismo literario en lengua española: Ibarbourou, Storni y Mistral plantaron, sin acaso saberlo, la semilla de toda la poesía femenina latinoamericana posterior.&lt;/p&gt;

&lt;p&gt;Lee la &lt;a href=&quot;../entre_un_par_de_maletas_a_medio_abrir_y_las_manecillas_del_reloj/&quot;&gt;conferencia de Alfonsina Storni&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;También puedes escuchar el audio de la conferencia: # _include/embed-audio.html&lt;/p&gt;
&lt;audio controls=&quot;&quot;&gt;
  &lt;source src=&quot;../assets/audio/alfonsina_storni.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;
  Your browser does not support the audio element.
&lt;/audio&gt;
&lt;p&gt;O descargar una &lt;a href=&quot;https://github.com/lavoragine/la_misteriosa_maternidad_del_verso/releases/tag/demo&quot;&gt;muestra&lt;/a&gt; del libro que incluye la conferencia de Alfonsina Storni y el audio de la conferencia.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Libros" /><category term="feminismo" /><summary type="html">El año 1938 el Ministerio de Educación (en esa época “de Instrucción”) de Uruguay organizó un curso de verano en Instituto Vázquez Acevedo. A una de las sesiones fueron invitadas las mayores exponentes de la poesía del cono sur de ese momento: Juana de Ibarbourou, de Uruguay; Alfonsina Storni, de Argentina y Gabriela Mistral, de Chile, para hablar de su labor poética y explicar cómo escribían sus versos.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/3conferencias_cover_11x18.jpg" /><media:content medium="image" url="http://localhost:4000/3conferencias_cover_11x18.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Liber amoris</title><link href="http://localhost:4000/liber-amoris/" rel="alternate" type="text/html" title="Liber amoris" /><published>2022-01-26T00:00:00+01:00</published><updated>2022-01-26T00:00:00+01:00</updated><id>http://localhost:4000/liber-amoris</id><content type="html" xml:base="http://localhost:4000/liber-amoris/">&lt;p&gt;Hazlitt, que nunca hizo las cosas a medias, abordó el amor con la misma pasión que el arte y la literatura, llevándose al borde del agotamiento nervioso y mental con su obsesión por una tal Sarah Walker, la improbable inspiración del Liber Amoris.&lt;/p&gt;

&lt;p&gt;La más honesta de las confesiones literarias, con su singular falta de vanidad, el Liber Amoris es el estudio de una mente altamente intelectual perjudicada por un amor irremediable y no correspondido, una obsesión tan absoluta que la razón y el intelecto no eran armas contra la manía, una mente elevada que no ofrecía inmunidad a las vulgaridades de las ansias emocionales y los celos.&lt;/p&gt;

&lt;p&gt;Eternamente inflexible en sus escritos y en su vida, Hazlitt no tenía ningún interés en cortejar a la opinión pública, por lo que Liber Amoris, cuando se publicó, dio a sus críticos y enemigos todas las herramientas que necesitaban para destruir su reputación. Pero Hazlitt poseía autosuficiencia en abundancia y en su ensayo “Mi primer contacto con los poetas” comentó:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Así he holgazaneado mi vida, leyendo libros, mirando cuadros, yendo a obras de teatro, oyendo, pensando y escribiendo sobre lo que más me gustaba. Sólo he querido una cosa que me hiciera feliz; pero queriendo eso, lo he querido todo”.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Libros" /><summary type="html">Hazlitt, que nunca hizo las cosas a medias, abordó el amor con la misma pasión que el arte y la literatura, llevándose al borde del agotamiento nervioso y mental con su obsesión por una tal Sarah Walker, la improbable inspiración del Liber Amoris.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/liberAmoris_cover_5.jpg" /><media:content medium="image" url="http://localhost:4000/liberAmoris_cover_5.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Accesibilidad en Libros electrónicos</title><link href="http://localhost:4000/taller-sobre-accesibilidad-en-epub/" rel="alternate" type="text/html" title="Accesibilidad en Libros electrónicos" /><published>2022-01-25T01:00:00+01:00</published><updated>2022-01-25T01:00:00+01:00</updated><id>http://localhost:4000/taller-sobre-accesibilidad-en-epub</id><content type="html" xml:base="http://localhost:4000/taller-sobre-accesibilidad-en-epub/">&lt;p&gt;Todo el mundo está de acuerdo en que la accesibilidad es importante, pero lo cierto es la mayoría de las publicaciones hoy en día no son accesibles, y se necesitan esfuerzos grandiosos para enmendarlas, esfuerzos que la mayoría de los editores no pueden costearse. Rehacer archivos para incorporar elementos de accesibilidad  es una tarea que consume gran cantidad de tiempo. Y, sin embargo, es una urgencia que no puede ser aplazada.&lt;/p&gt;

&lt;p&gt;Se calcula que las personas con discapacidad representan el 15% de la población mundial. Y esto es una realidad que va en aumento. &lt;a href=&quot;https://www.nih.gov/news-events/news-releases/visual-impairment-blindness-cases-us-expected-double-2050#:~:text=With%20the%20youngest%20of%20the,Eye%20Institute%2C%20part%20of%20the&quot;&gt;Estudios realizados&lt;/a&gt; han mostrado que los casos de discapacidad visual están creciendo. De hecho, las proyecciones sugieren que las cifras podrían duplicarse en los próximos 30 años. Esto supone un porcentaje importantísimo de la población que está en desventaja a la hora de adquirir conocimientos, desarrollar una carrera profesional o sencillamente disfrutar del ocio.  La accesibilidad es un imperativo que tiene que ver con nuestros derechos fundamentales. No es posible una democracia en la que una parte de la población se vea desfavorecida respecto de sus posibilidades de participación en la vida colectiva.&lt;/p&gt;

&lt;p&gt;Existe también una serie de equívocos respecto de la accesibilidad en libros. Por ejemplo, muchas veces se confunde un libro accesible con un audiolibro, y en algunos contextos hasta se utilizan como términos intercambiables, pero lo cierto es que ni todos los libros accesibles son audiolibros ni todos los audiolibros son accesibles.&lt;/p&gt;

&lt;p&gt;Es posible que una obra que sea accesible para una persona no lo sea para otra; los requisitos varían en gran medida, según las capacidades de las distintas personas, sus habilidades y preferencias. En términos generales, un libro “accesible” es el que ofrece la máxima flexibilidad de uso a todos los lectores y permite acceder al contenido y manipularlo con facilidad tanto por las personas que tienen discapacidades como por las que no las tienen.&lt;/p&gt;

&lt;p&gt;Si bien es cierto que un libro con audio incorporado es un plus, hay una serie de otras preguntas que plantearse al respecto. La más importante es si el libro es fácil de manipular (si la persona discapacitada puede acceder a él desde su computador o  puede navegar por una web hasta encontrarlo). Un audiolibro puede contener una narración que una persona ciega pueda seguir, pero si carece  de un sistema de navegación que su dispositivo de asistencia (lector dedicado, computador o  teléfono celular) pueda interpretar, el libro es inútil. Esto sólo es un ejemplo de cómo se puede crear un libro con la mejor de las intenciones para ponerlo a disposición de personas con necesidades especiales y sin embargo terminar haciendo un libro inaccesible.&lt;/p&gt;

&lt;p&gt;Otro malentendido recurrente es creer que el problema se reduce a personas ciegas: sólo el 15 por cierto de los usuarios de Bookshare son ciegos, pero la mayoría son disléxicos. Problemas de audición y movilidad también pueden hacer que una publicación resulte a la larga inaccesible.&lt;/p&gt;

&lt;p&gt;Junto con esto, también existen una serie de discapacidades situaciones o temporales: personas que han sufrido un accidente (y han perdido la capacidad de pasar las páginas de un libro, por ejemplo, y dependen de un dispositivo que reconozca su voz y pueda seguir sus instrucciones a la hora de navegar por un libro) o incluso personas que están en un contexto en que no es posible la lectura visual.&lt;/p&gt;

&lt;p&gt;Esto nos lleva a la pregunta más importante: ¿cómo una persona con necesidades especiales accede a un contenido determinado, pongamos por caso, un libro?&lt;/p&gt;

&lt;p&gt;Aquí hay una gran variedad de respuestas, dependiendo del tipo de discapacidad, o de handicap en general, o del dispositivo que tengan a mano. Las tecnologías de asistencia son múltiples y en muchos casos están incorporadas en los dispositivos o en las aplicaciones que el usuario de ese dispositivo tiene instalado en su sistema operativo. Pueden utilizar (si está disponible) el &lt;em&gt;Text to Spech&lt;/em&gt; (la tecnología que permite que el texto se renderice como audio sintetizado), acceder al audio incorporado, o un lector de Braille. Pero en todos los casos, que el usuario acceda al contenido depende del etiquetado del archivo que el dispositivo debe interpretar. Los dispositivos, por avanzados que sean, no pueden hacer magia: no son capaces de identificar la navegación del texto (la tabla de contenidos) si el editor no la marcado en el código del libro, ni es capaz de ofrecer &lt;em&gt;media overlays&lt;/em&gt; (sincronización de audio y texto) si esta característica no ha sido codificada en el archivo. Un libro accesible es un libro cuyo contenido puede ser &lt;em&gt;leído&lt;/em&gt; por una persona con dificultades para acceder al libro impreso, pero esa es sólo una parte de la ecuación: el libro debe estar también en condiciones de ser interpretado por una maquina y de que esta pueda entender qué parte del texto es un título, cómo hallar el índice o incluso dónde encontrar la información para describir una imagen que añade algo al texto.&lt;/p&gt;

&lt;p&gt;Una cuestión importante es el formato. El ePub es ampliamente considerado como el formato estándar para la diseminación de contenido accesible. Y sin embargo, hay una importante mayoría de editores (de libros comerciales, pero también de textos escolares, o hasta de publicaciones académicas) que insisten en producir (o enviar, sencillamente) PDFs. Dado que la función principal del PDF es emular el papel en la pantalla, no parece una elección muy acertada. Y aun cuando existe la posibilidad de preparar un PDF para incluir muchas características que mejoran la accesibilidad, esto es algo que exige o bien una cuidadosa planificación (para incluir estas características en el flujo de trabajo editorial) o un importante gasto de tiempo para enmendarlo (en caso de que lo que se quiera es hacer accesible, por ejemplo, un PDF preparado originalmente para ser impreso). Por supuesto, un PDF jamás podrá adaptarse a cualquier pantalla de la manera que lo hace el contenido etiquetado en HTML. Si consideramos que un recurso cada vez más empleado para acceder a contenidos, incluso libros largos, es el teléfono celular, podemos ver que como solución, dista de ser satisfactoria.&lt;/p&gt;

&lt;p&gt;Para responder a estas inconsistencias, podemos establecer que lo ideal sería que:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Las publicaciones nacieran accesibles, lo cual quiere decir que es necesario que fueran creadas como parte del flujo de trabajo normal de la editorial y no que requirieran que se las enmendase a posteriori. Y,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;que los potenciales usuarios de una publicación accesible pudieran utilizar la misma edición que los demás lectores y al mismo tiempo que todos ellos.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Garantizar esto supone convalidar un derecho: el acceso a la información. Y también significa que los parámetros y criterios para crear una publicación accesible deben estar incorporados en nuestro &lt;em&gt;workflow&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Este es el tema de este taller.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Proyectos" /><category term="Blog" /><summary type="html">Todo el mundo está de acuerdo en que la accesibilidad es importante, pero lo cierto es la mayoría de las publicaciones hoy en día no son accesibles, y se necesitan esfuerzos grandiosos para enmendarlas, esfuerzos que la mayoría de los editores no pueden costearse. Rehacer archivos para incorporar elementos de accesibilidad es una tarea que consume gran cantidad de tiempo. Y, sin embargo, es una urgencia que no puede ser aplazada. Se calcula que las personas con discapacidad representan el 15% de la población mundial. Y esto es una realidad que va en aumento. Estudios realizados han mostrado que los casos de discapacidad visual están creciendo. De hecho, las proyecciones sugieren que las cifras podrían duplicarse en los próximos 30 años. Esto supone un porcentaje importantísimo de la población que está en desventaja a la hora de adquirir conocimientos, desarrollar una carrera profesional o sencillamente disfrutar del ocio. La accesibilidad es un imperativo que tiene que ver con nuestros derechos fundamentales. No es posible una democracia en la que una parte de la población se vea desfavorecida respecto de sus posibilidades de participación en la vida colectiva. Existe también una serie de equívocos respecto de la accesibilidad en libros. Por ejemplo, muchas veces se confunde un libro accesible con un audiolibro, y en algunos contextos hasta se utilizan como términos intercambiables, pero lo cierto es que ni todos los libros accesibles son audiolibros ni todos los audiolibros son accesibles. Es posible que una obra que sea accesible para una persona no lo sea para otra; los requisitos varían en gran medida, según las capacidades de las distintas personas, sus habilidades y preferencias. En términos generales, un libro “accesible” es el que ofrece la máxima flexibilidad de uso a todos los lectores y permite acceder al contenido y manipularlo con facilidad tanto por las personas que tienen discapacidades como por las que no las tienen. Si bien es cierto que un libro con audio incorporado es un plus, hay una serie de otras preguntas que plantearse al respecto. La más importante es si el libro es fácil de manipular (si la persona discapacitada puede acceder a él desde su computador o puede navegar por una web hasta encontrarlo). Un audiolibro puede contener una narración que una persona ciega pueda seguir, pero si carece de un sistema de navegación que su dispositivo de asistencia (lector dedicado, computador o teléfono celular) pueda interpretar, el libro es inútil. Esto sólo es un ejemplo de cómo se puede crear un libro con la mejor de las intenciones para ponerlo a disposición de personas con necesidades especiales y sin embargo terminar haciendo un libro inaccesible. Otro malentendido recurrente es creer que el problema se reduce a personas ciegas: sólo el 15 por cierto de los usuarios de Bookshare son ciegos, pero la mayoría son disléxicos. Problemas de audición y movilidad también pueden hacer que una publicación resulte a la larga inaccesible. Junto con esto, también existen una serie de discapacidades situaciones o temporales: personas que han sufrido un accidente (y han perdido la capacidad de pasar las páginas de un libro, por ejemplo, y dependen de un dispositivo que reconozca su voz y pueda seguir sus instrucciones a la hora de navegar por un libro) o incluso personas que están en un contexto en que no es posible la lectura visual. Esto nos lleva a la pregunta más importante: ¿cómo una persona con necesidades especiales accede a un contenido determinado, pongamos por caso, un libro? Aquí hay una gran variedad de respuestas, dependiendo del tipo de discapacidad, o de handicap en general, o del dispositivo que tengan a mano. Las tecnologías de asistencia son múltiples y en muchos casos están incorporadas en los dispositivos o en las aplicaciones que el usuario de ese dispositivo tiene instalado en su sistema operativo. Pueden utilizar (si está disponible) el Text to Spech (la tecnología que permite que el texto se renderice como audio sintetizado), acceder al audio incorporado, o un lector de Braille. Pero en todos los casos, que el usuario acceda al contenido depende del etiquetado del archivo que el dispositivo debe interpretar. Los dispositivos, por avanzados que sean, no pueden hacer magia: no son capaces de identificar la navegación del texto (la tabla de contenidos) si el editor no la marcado en el código del libro, ni es capaz de ofrecer media overlays (sincronización de audio y texto) si esta característica no ha sido codificada en el archivo. Un libro accesible es un libro cuyo contenido puede ser leído por una persona con dificultades para acceder al libro impreso, pero esa es sólo una parte de la ecuación: el libro debe estar también en condiciones de ser interpretado por una maquina y de que esta pueda entender qué parte del texto es un título, cómo hallar el índice o incluso dónde encontrar la información para describir una imagen que añade algo al texto. Una cuestión importante es el formato. El ePub es ampliamente considerado como el formato estándar para la diseminación de contenido accesible. Y sin embargo, hay una importante mayoría de editores (de libros comerciales, pero también de textos escolares, o hasta de publicaciones académicas) que insisten en producir (o enviar, sencillamente) PDFs. Dado que la función principal del PDF es emular el papel en la pantalla, no parece una elección muy acertada. Y aun cuando existe la posibilidad de preparar un PDF para incluir muchas características que mejoran la accesibilidad, esto es algo que exige o bien una cuidadosa planificación (para incluir estas características en el flujo de trabajo editorial) o un importante gasto de tiempo para enmendarlo (en caso de que lo que se quiera es hacer accesible, por ejemplo, un PDF preparado originalmente para ser impreso). Por supuesto, un PDF jamás podrá adaptarse a cualquier pantalla de la manera que lo hace el contenido etiquetado en HTML. Si consideramos que un recurso cada vez más empleado para acceder a contenidos, incluso libros largos, es el teléfono celular, podemos ver que como solución, dista de ser satisfactoria. Para responder a estas inconsistencias, podemos establecer que lo ideal sería que: Las publicaciones nacieran accesibles, lo cual quiere decir que es necesario que fueran creadas como parte del flujo de trabajo normal de la editorial y no que requirieran que se las enmendase a posteriori. Y, que los potenciales usuarios de una publicación accesible pudieran utilizar la misma edición que los demás lectores y al mismo tiempo que todos ellos. Garantizar esto supone convalidar un derecho: el acceso a la información. Y también significa que los parámetros y criterios para crear una publicación accesible deben estar incorporados en nuestro workflow. Este es el tema de este taller.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/ice-texture.jpeg" /><media:content medium="image" url="http://localhost:4000/ice-texture.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Editar en tiempos digitales</title><link href="http://localhost:4000/editar_en_tiempos_digitales/" rel="alternate" type="text/html" title="Editar en tiempos digitales" /><published>2021-11-26T01:00:00+01:00</published><updated>2021-11-26T01:00:00+01:00</updated><id>http://localhost:4000/editar_en_tiempos_digitales</id><content type="html" xml:base="http://localhost:4000/editar_en_tiempos_digitales/">&lt;h1 id=&quot;la-digitalización-y-la-edición-de-contenidos&quot;&gt;La digitalización y la edición de contenidos&lt;/h1&gt;

&lt;p&gt;En estos tiempos pandémicos, hay pocos conceptos más socorridos que el de “digitalización”. Para muchos, es la oportunidad de consumar una serie de transformaciones que se prometían desde el advenimiento de internet y todos los desarrollos que supuso su universalización  (la colaboración en tiempo real, el trabajo en la nube, la web semántica, la geolocalización, la inteligencia artificial, por nombrar sólo algunos), para otros se trata poco más que de una molestia infinita, que supone abandonar hábitos internalizados y reemplazarlos por otros que a su vez no tardarán en quedar obsoletos. Como sea, en este enjambre de novedades que nos atraviesa, la famosa digitalización sigue siendo en muchas disciplinas y aspectos un concepto oscuro. El propósito de estas páginas es explorar qué significa y cuáles son sus consecuencias en el ámbito de la edición de contenidos.&lt;/p&gt;

&lt;p&gt;Y el primer punto sería determinar de qué hablamos cuando hablamos de “edición digital”. Según la RAE, digitalizar es o bien “registrar datos en forma digital”, o bien “convertir o codificar en números dígitos datos o informaciones de carácter continuo, como una imagen fotográfica, un documento o un libro”. Aquí, lo que nos interesa es la segunda acepción: porque expresa con exactitud el malentendido base que late en la discusión sobre la digitalización en el ámbito de la edición de libros.&lt;/p&gt;

&lt;p&gt;Me explico. Si seguimos esta definición, no tenemos ninguna dificultad en identificar un archivo PDF como un archivo digital. Y no cabe duda de que lo es, un formato de archivo digital creado y mantenido como estándar (ISO 32000) con una función principal: representar con fidelidad el formato y las características de un documento &lt;em&gt;físico&lt;/em&gt;. Lo cual, por otra parte, supone que un PDF es un formato estupendo para enviar a imprenta y también para imprimir los formularios de impuestos y los posters para hallar gatitos desaparecidos, pero es algo menos útil para presentar contenidos en pantalla. Pantalla que puede ser de distintos tipos y dimensiones. El PDF está diseñado para representar la manera en que diversos elementos se organizan en el papel y no para determinar cómo se organizan en una pantalla cualquiera. Y lo cierto es que ya sea que hablemos de la edición de contenidos en un sentido restringido (cuyo destino primario sea ser distribuidos en forma de libros), o  en un sentido más amplio (artículos académicos, entradas de blog, hilos de Twitter, catálogos, etc…), tarde o temprano ese contenido (o partes de él) será leído en una pantalla. Un PDF es un formato donde los objetos que representa son inamovibles (y esa es su gracia), una pantalla en cambio es un medio que exige un formato donde los objetos representados puedan reacomodarse según sus características sin que eso suponga desestructurarlo. O de otra manera: significa que el formato del texto debe estar separado de su estructura y el PDF, en tanto fue diseñado para emular el papel impreso, no distingue entre uno y otro a menos que se le diga que lo haga. Pero también ocurre que por muy bien diseñado que esté ese PDF, es probable que sea leído en una multitud de dispositivos (ereaders, tablets, computadoras, smarts TVs, lectores de braille, hasta relojes) cada cual con sus especificaciones y propiedades. Y eso es algo que definitivamente no hace bien. Por que no fue diseñado para eso. Un buen ejemplo de esto son los portales memorialisticos o patrimoniales que se presentan como archivos “digitalizados” de libros y documentos. Como esfuerzo archivistico es encomiable, que duda cabe. Pero en términos editoriales, representan un fracaso. La lectura de un PDF escaneado (con más precisión: una imagen incrustada dentro de un archivo PDF) pocas veces es una experiencia amable.&lt;/p&gt;

&lt;h2 id=&quot;editar-en-digital&quot;&gt;Editar en digital&lt;/h2&gt;

&lt;p&gt;El problema radica en que la edición digital no significa necesariamente trabajar con herramientas digitales sino trabajar con herramientas orientadas a formatos de salida digitales (o lo que es equivalente: a múltiples formatos de salida). Un ejemplo de los problemas que plantea esto es el venerable M.S Word. Por razones que van desde su facilidad de uso hasta su omnipresencia en las computadoras, se ha transformado en una especie de estándar de facto en la industria de la publicación de contenidos, aunque lo cierto es que también se trata de un residuo de una época en que el papel era el único formato de salida posible y de que su objetivo específico era servir a la redacción de documentos de oficina. Es una herramienta digital, pero aunque a lo largo de los años y las versiones se le hallan ido agregando cada vez más funcionalidades, no es capaz de hacer las cosas básicas que se le piden a una  herramienta destinada a entornos de producción de contenidos multidispositivos: no puede exportar un HTML útil (para colgarlo en la web), ni generar archivos usables para construir un EPUB (para leerlo en un E-Reader), no puede ser convertido en otro formato de texto sin que eso lleve a innumerables dolores de cabeza, su exportación a otras aplicaciones es siempre problemática, y sus posibilidades de trabajo colaborativo son, de nuevo, muy limitadas. Discutiré esto en otra entrada, pero de momento hay que tener en cuenta que editar en estos tiempos digitales significa entre otras cosas que tu contenido será colgado en la web, convertido a ebook, atomizado en post de distinto tipo, alimentara catálogos, requerirá metadata, será leído o transformado en Braille por dispositivos de asistencia, querrá transformarse y fluir. Por tanto, necesitaremos herramientas que puedan conectarse con otras, que generen archivos livianos, que no estén prisioneras de códigos incomprensibles, que puedan someterse a control de versiones y que dispongan de posibilidades de trabajo colaborativo. O sea: lo que necesitamos son archivos de texto plano.&lt;/p&gt;

&lt;h2 id=&quot;editar-en-texto-plano&quot;&gt;Editar en texto plano&lt;/h2&gt;

&lt;p&gt;Los que son lo suficientemente viejos, alguna vez habrán tipeado un trabajo escolar en una maquina de escribir. Las venerables máquinas de escribir hacían básicamente eso: escribir texto. No podían incluir ilustraciones, declarar cursivas, cambiar de tipografía… En realidad no podían hacer casi nada que no fuera escribir texto. Si necesitábamos poner una foto o bien, poníamos un espacio para pegarla después, o bien, escribíamos “aquí va la ilustración x” en caso de que después eso fuera a imprenta y alguien se ocupara de componer el documento. Esa persona interpretaba el texto y decidía qué hacer con él: donde poner cursivas, negritas, qué fuente utilizar, etc, etc… O sea, lo ya dicho, había una separación natural (natural en relación al alcance de las herramientas) entre el contenido y el aspecto que este contenido adquiriera una vez editado, aunque tal vez nadie se lo planteara de esta manera. Para establecer instrucciones acerca del significado semántico de cada porción de texto, se utilizaban anotaciones, muchas veces manuales (este texto subrayado va en cursivas, este otro texto es una lista, el pie de foto va aquí, esto es un subtitulo en negritas, etc…). Con el tiempo y la aparición de las primeras computadoras, se idearon los lenguajes de marcado (primero el GML, luego el SGML, más tarde el HTML) y su intención es básicamente la misma que tenían aquellas anotaciones: indicar qué función tiene cada porción de texto dentro de la estructura general. Esto permite que la computadora formatee el texto siguiendo las instrucciones y, al mismo tiempo, que la computadora &lt;em&gt;entienda&lt;/em&gt; esa función.&lt;/p&gt;

&lt;h2 id=&quot;los-lenguajes-de-marcado-o-etiquetado&quot;&gt;Los lenguajes de marcado o etiquetado&lt;/h2&gt;

&lt;p&gt;Los lenguajes de marcado comparten una sintaxis a base de etiquetas y todos, más o menos funcionan igual:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;h1&amp;gt; Esto es un título&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt; Este es un párrafo de texto, donde hay &amp;lt;em&amp;gt;un texto etiquetado como itálicas&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Esto es HTML, pero podría ser cualquier otro lenguaje de etiquetado. Lo importante es que las etiquetas definen la función del texto que está entre ellas (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h1&lt;/code&gt; singifica &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heading 1&lt;/code&gt;, o título principal, y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paragraph&lt;/code&gt; o párrafo). También los procesadores de texto funcionan de esta manera, pero al ser lo que se conoce como WYSIWYG (what you see is what you get, “lo que ves es que consigues”), el código (las etiquetas) están ocultas, dejándonos sin ninguna posibilidad de ver qué pasa tras bambalinas. Un editor de texto plano opera de la manera opuesta: es casi una maquina de escribir, aunque infinitamente más sofisticada. Supone sencillamente escribir caracteres y espacios en una pantalla.&lt;/p&gt;

&lt;p&gt;Dado que no tenemos controles visuales para trasformar palabras o conjuntos de palabras en cursivas, marcamos el texto a través de etiquetas (como en el ejemplo anterior, en html): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;este texto va en cursivas&amp;lt;/em&amp;gt;&lt;/code&gt;. Pero escribir código HTML (o cualquier otro lenguaje de etiquetas: xml, docbook, etc…) es laborioso, por mucho que existan herramientas que lo facilitan. Es por eso que fueron ideados los lenguajes de marcado ligero, de los cuales Markdown es el más conocido. En este caso solo tenemos que preocuparnos de aprender una serie de marcas, que funcionan en entornos tan distintos y cotidianos como wordpress y whatsapp, y que pueden formatear documentos, convertirlos en otros formatos, y manipularlos casi instantaneamente. (si quieren probar, basta que abran un chat en whatsapp y escriban: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*esto es un texto en negritas*&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_esto es un texto en itálicas_&lt;/code&gt; y verán como whatsapp los obedece). ¿Por qué ocurre esto? Por que cualquier lenguaje de etiquetado consistente (que tiene un conjunto de etiquetas que se escriben de una manera determinada y hacen lo mismo siempre) puede ser transformado en cualquier otro lenguaje de etiquetas por un parser (un programa que trasforma unas etiquetas en otras). Esto se puede hacer en el caso de markdown y whatsapp, que es un caso sencillo, pero también puede ser que queramos convertir un libro entero formateado en markdown e importarlo en indesign: utilizando pandoc (un programa de manipulación y conversión de texto) y una sencilla orden, lo podemos hacer instantáneamente. Lo más importante: un archivo de texto plano formateado en markdown nos permite convertirlo en un PDF para imprenta (vía pandoc e indesign), en una página web (vía pandoc), en un epub (idem) y renderizarlo por un lector de Braille sin problemas y casi instantaneamente.&lt;/p&gt;

&lt;h2 id=&quot;separar-contenido-de-su-presentación&quot;&gt;Separar contenido de su presentación.&lt;/h2&gt;

&lt;p&gt;La principal ventaja de trabajar en texto plano es la separación de contenido y apariencia, lo que equivale a decir que la estructura semántica del texto y su diseño van aparte. En lugar de utilizar una fuente extraña y en cuerpo más grande para señalar un título, lo que hacemos es etiquetar el texto como título y luego, en una hoja de estilo aparte (panel de estilos en InDesign, CSS en HTML y EPUB, un template en Latex) podemos personalizar la manera en que ese contenido se presentará según el formato de salida o el dispositivo que vaya a renderizarlo. Esto permite que un mismo texto, estructurado de la misma manera, pueda, asociandolo a unas instrucciones determinadas, ser una página web, un ebook, una aplicación móvil, y un PDF para imprenta, sin tocar el documento en si mismo. Naturalmente, es necesario escribir (o adaptar) estas hojas de estilo, pero si tenemos una editorial y vamos a producir muchos libros que se parecen (usan la misma tipografía, o comparten un diseño base) esto será trabajo de una vez. Esto también permitirá (si el archivo está bien estructurado) que nuestro contenido sea accesible de origen.&lt;/p&gt;

&lt;h2 id=&quot;control-de-versiones&quot;&gt;Control de versiones&lt;/h2&gt;

&lt;p&gt;Otra de las ventajas de los archivos de texto plano es que nos permiten utilizar sofisticadísimos sistemas de control de versiones. El más conocido, pero no el único, es GIT. 
GIT es un software de control de versiones &lt;em&gt;distribuido&lt;/em&gt;, lo que significa que cada copia de un archivo sometido a control de versiones se encuentra simultaneamente en todos los computadores de quienes trabajan en ese archivo. Y Git puede recordar cada uno de los cambios que los usuarios han hecho en el archivo. De manera que no hay manera que un azar desafortunado se lleve tu trabajo. Git sabe donde está. 
Pero no sólo puede hacer esto: controlar versiones para GIT no sólo significa que puede llevar un registro de cada cosa que hallas hecho sino también que te da la posibilidad de crear ramas alternativas de tu trabajo para que ensayes y experimentes sin tocar la parte ya definitiva de tu trabajo. Esto permite también que puedas crear versiones distintas de tu contenido (por ejemplo, para diferentes formatos o diferentes audiencias, imaginate la traducción de un libro con una versión española y otra neutra y otra en chileno profundo) dentro del mismo archivo. Y esto, que se dice rápido, significa librarse de esas carpetas infinitas llenas de words (version_final.docx, version_final_corregida.docx, version_final_correccion_03-05-2022.docx, etc…)
GIT fue diseñado por el creador de Linux, Linus Torvald, como sistema de control de versiones para los desarrolladores de software. pero el software y los libros comparten muchas cosas. La principal: son texto.&lt;/p&gt;

&lt;p&gt;Pero no todo acaba aquí. Existen numerosas plataformas en la nube creadas con Git como base. La más conocida (no la única) es GitHub. Y entre sus caracteristicas están darte un espacio (libre y gratuito) para que mantengas tus archivos organizados en repositorios, manejes lo que quieres compartir de ellos, y hasta puedas crearte una página web. Los archivos de texto plano también te dan la posibilidad de montarte tu propia nube.&lt;/p&gt;

&lt;h2 id=&quot;sostenibilidad&quot;&gt;Sostenibilidad&lt;/h2&gt;
&lt;p&gt;Mi primer computador fue un 286 que me vendió un amigo. No tenía Windows, de manera que la forma de trabajar con él a través de la línea de comandos. Cuando lo encendía, sonaba como un refrigerador. Y tenía una pantalla deliciosa, con unas muy coquetas letras verdes. Lo usaba mayormente para escribir mis trabajos de la universidad y algún que otro cuento. Después de ese computador, vinieron otros. Apareció Windows. Cambién los &lt;em&gt;floppy disks&lt;/em&gt; por CDs y luego estos por Pendrives. Cómo todo el mundo, terminé mudandome muy rápidamente a Word. Principalmente, por que estaba en todas partes. Y por que Wordperfect, que era el programa que yo utilizaba para escribir, desapareció en algún momento durante el cambio de milenio. Y fui acumulando decenas, cientos y luego miles de cds, dvds, pendrives y discos duros. Después de haber migrado entre sistemas operativos y haber trasladado archivos de textos de un dispositivo a otro y luego a la nube, y haber intentado leerlos una y otra vez a lo largo de los años, puedo decir que que la cantidad de tiempo que he perdido intentando descifrar documentos de word en otros programas o en una versión distinta de word, me habría dado tiempo para escribir un par de novelas y hasta una opera. 
Porque word o cualquier otro procesador de texto que sea software propietario y esté protegido por una licencia comercial puede desaparecer mañana o cambiar o enloquecer completamente y ahi quedarán tus documentos: extraviados en la tierra de nadie de los archivos huerfanos. Como pasó con mis documentos de Wordperfect o mis viejos words, que si ahora intentara abrir probablemente haría que mi laptop estallara en pedazos. Esto puede parecer un imposible, pero cosas más extrañas han pasado. Lycos, Geocities, MySpace, WordPerfect, OpenOffice… la lista de software o plataformas que en algun momento parecían sólidas y dignas de toda confianza que han desaparecido es interminable. Si de lo que se trata es de mantener archivos domésticos o tus trabajos de universidad, tal vez pueda moderarse la preocupación. pero si estamos hablando de construir un catálogo, mantener un archivo de documentos, o almacenar todos los números de una revista, tal vez habría que pensar en la sostenibilidad del formato que escogemos. Sobretodo si se trata de contenidos que queremos reciclar o tener a mano. Tal vez la mejor opción sea buscar un formato que no tenga capas ocultas y que cualquier máquina, ahora o en el siglo XXX pueda abrir. Y que sea ligero y que minimize el error y pueda someterse a control de versiones. Y que pese poco y pueda ser almacenado sin que la cuestión del espacio sea una preocupación (alguién alguna vez pensó que iba a llenar el mailbox de Google…? ).&lt;/p&gt;

&lt;p&gt;O sea: un archivo de texto plano.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Proyectos" /><category term="Blog" /><summary type="html">La digitalización y la edición de contenidos En estos tiempos pandémicos, hay pocos conceptos más socorridos que el de “digitalización”. Para muchos, es la oportunidad de consumar una serie de transformaciones que se prometían desde el advenimiento de internet y todos los desarrollos que supuso su universalización (la colaboración en tiempo real, el trabajo en la nube, la web semántica, la geolocalización, la inteligencia artificial, por nombrar sólo algunos), para otros se trata poco más que de una molestia infinita, que supone abandonar hábitos internalizados y reemplazarlos por otros que a su vez no tardarán en quedar obsoletos. Como sea, en este enjambre de novedades que nos atraviesa, la famosa digitalización sigue siendo en muchas disciplinas y aspectos un concepto oscuro. El propósito de estas páginas es explorar qué significa y cuáles son sus consecuencias en el ámbito de la edición de contenidos. Y el primer punto sería determinar de qué hablamos cuando hablamos de “edición digital”. Según la RAE, digitalizar es o bien “registrar datos en forma digital”, o bien “convertir o codificar en números dígitos datos o informaciones de carácter continuo, como una imagen fotográfica, un documento o un libro”. Aquí, lo que nos interesa es la segunda acepción: porque expresa con exactitud el malentendido base que late en la discusión sobre la digitalización en el ámbito de la edición de libros. Me explico. Si seguimos esta definición, no tenemos ninguna dificultad en identificar un archivo PDF como un archivo digital. Y no cabe duda de que lo es, un formato de archivo digital creado y mantenido como estándar (ISO 32000) con una función principal: representar con fidelidad el formato y las características de un documento físico. Lo cual, por otra parte, supone que un PDF es un formato estupendo para enviar a imprenta y también para imprimir los formularios de impuestos y los posters para hallar gatitos desaparecidos, pero es algo menos útil para presentar contenidos en pantalla. Pantalla que puede ser de distintos tipos y dimensiones. El PDF está diseñado para representar la manera en que diversos elementos se organizan en el papel y no para determinar cómo se organizan en una pantalla cualquiera. Y lo cierto es que ya sea que hablemos de la edición de contenidos en un sentido restringido (cuyo destino primario sea ser distribuidos en forma de libros), o en un sentido más amplio (artículos académicos, entradas de blog, hilos de Twitter, catálogos, etc…), tarde o temprano ese contenido (o partes de él) será leído en una pantalla. Un PDF es un formato donde los objetos que representa son inamovibles (y esa es su gracia), una pantalla en cambio es un medio que exige un formato donde los objetos representados puedan reacomodarse según sus características sin que eso suponga desestructurarlo. O de otra manera: significa que el formato del texto debe estar separado de su estructura y el PDF, en tanto fue diseñado para emular el papel impreso, no distingue entre uno y otro a menos que se le diga que lo haga. Pero también ocurre que por muy bien diseñado que esté ese PDF, es probable que sea leído en una multitud de dispositivos (ereaders, tablets, computadoras, smarts TVs, lectores de braille, hasta relojes) cada cual con sus especificaciones y propiedades. Y eso es algo que definitivamente no hace bien. Por que no fue diseñado para eso. Un buen ejemplo de esto son los portales memorialisticos o patrimoniales que se presentan como archivos “digitalizados” de libros y documentos. Como esfuerzo archivistico es encomiable, que duda cabe. Pero en términos editoriales, representan un fracaso. La lectura de un PDF escaneado (con más precisión: una imagen incrustada dentro de un archivo PDF) pocas veces es una experiencia amable. Editar en digital El problema radica en que la edición digital no significa necesariamente trabajar con herramientas digitales sino trabajar con herramientas orientadas a formatos de salida digitales (o lo que es equivalente: a múltiples formatos de salida). Un ejemplo de los problemas que plantea esto es el venerable M.S Word. Por razones que van desde su facilidad de uso hasta su omnipresencia en las computadoras, se ha transformado en una especie de estándar de facto en la industria de la publicación de contenidos, aunque lo cierto es que también se trata de un residuo de una época en que el papel era el único formato de salida posible y de que su objetivo específico era servir a la redacción de documentos de oficina. Es una herramienta digital, pero aunque a lo largo de los años y las versiones se le hallan ido agregando cada vez más funcionalidades, no es capaz de hacer las cosas básicas que se le piden a una herramienta destinada a entornos de producción de contenidos multidispositivos: no puede exportar un HTML útil (para colgarlo en la web), ni generar archivos usables para construir un EPUB (para leerlo en un E-Reader), no puede ser convertido en otro formato de texto sin que eso lleve a innumerables dolores de cabeza, su exportación a otras aplicaciones es siempre problemática, y sus posibilidades de trabajo colaborativo son, de nuevo, muy limitadas. Discutiré esto en otra entrada, pero de momento hay que tener en cuenta que editar en estos tiempos digitales significa entre otras cosas que tu contenido será colgado en la web, convertido a ebook, atomizado en post de distinto tipo, alimentara catálogos, requerirá metadata, será leído o transformado en Braille por dispositivos de asistencia, querrá transformarse y fluir. Por tanto, necesitaremos herramientas que puedan conectarse con otras, que generen archivos livianos, que no estén prisioneras de códigos incomprensibles, que puedan someterse a control de versiones y que dispongan de posibilidades de trabajo colaborativo. O sea: lo que necesitamos son archivos de texto plano. Editar en texto plano Los que son lo suficientemente viejos, alguna vez habrán tipeado un trabajo escolar en una maquina de escribir. Las venerables máquinas de escribir hacían básicamente eso: escribir texto. No podían incluir ilustraciones, declarar cursivas, cambiar de tipografía… En realidad no podían hacer casi nada que no fuera escribir texto. Si necesitábamos poner una foto o bien, poníamos un espacio para pegarla después, o bien, escribíamos “aquí va la ilustración x” en caso de que después eso fuera a imprenta y alguien se ocupara de componer el documento. Esa persona interpretaba el texto y decidía qué hacer con él: donde poner cursivas, negritas, qué fuente utilizar, etc, etc… O sea, lo ya dicho, había una separación natural (natural en relación al alcance de las herramientas) entre el contenido y el aspecto que este contenido adquiriera una vez editado, aunque tal vez nadie se lo planteara de esta manera. Para establecer instrucciones acerca del significado semántico de cada porción de texto, se utilizaban anotaciones, muchas veces manuales (este texto subrayado va en cursivas, este otro texto es una lista, el pie de foto va aquí, esto es un subtitulo en negritas, etc…). Con el tiempo y la aparición de las primeras computadoras, se idearon los lenguajes de marcado (primero el GML, luego el SGML, más tarde el HTML) y su intención es básicamente la misma que tenían aquellas anotaciones: indicar qué función tiene cada porción de texto dentro de la estructura general. Esto permite que la computadora formatee el texto siguiendo las instrucciones y, al mismo tiempo, que la computadora entienda esa función. Los lenguajes de marcado o etiquetado Los lenguajes de marcado comparten una sintaxis a base de etiquetas y todos, más o menos funcionan igual: &amp;lt;h1&amp;gt; Esto es un título&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt; Este es un párrafo de texto, donde hay &amp;lt;em&amp;gt;un texto etiquetado como itálicas&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt; Esto es HTML, pero podría ser cualquier otro lenguaje de etiquetado. Lo importante es que las etiquetas definen la función del texto que está entre ellas (h1 singifica heading 1, o título principal, y p es paragraph o párrafo). También los procesadores de texto funcionan de esta manera, pero al ser lo que se conoce como WYSIWYG (what you see is what you get, “lo que ves es que consigues”), el código (las etiquetas) están ocultas, dejándonos sin ninguna posibilidad de ver qué pasa tras bambalinas. Un editor de texto plano opera de la manera opuesta: es casi una maquina de escribir, aunque infinitamente más sofisticada. Supone sencillamente escribir caracteres y espacios en una pantalla. Dado que no tenemos controles visuales para trasformar palabras o conjuntos de palabras en cursivas, marcamos el texto a través de etiquetas (como en el ejemplo anterior, en html): &amp;lt;em&amp;gt;este texto va en cursivas&amp;lt;/em&amp;gt;. Pero escribir código HTML (o cualquier otro lenguaje de etiquetas: xml, docbook, etc…) es laborioso, por mucho que existan herramientas que lo facilitan. Es por eso que fueron ideados los lenguajes de marcado ligero, de los cuales Markdown es el más conocido. En este caso solo tenemos que preocuparnos de aprender una serie de marcas, que funcionan en entornos tan distintos y cotidianos como wordpress y whatsapp, y que pueden formatear documentos, convertirlos en otros formatos, y manipularlos casi instantaneamente. (si quieren probar, basta que abran un chat en whatsapp y escriban: *esto es un texto en negritas* y _esto es un texto en itálicas_ y verán como whatsapp los obedece). ¿Por qué ocurre esto? Por que cualquier lenguaje de etiquetado consistente (que tiene un conjunto de etiquetas que se escriben de una manera determinada y hacen lo mismo siempre) puede ser transformado en cualquier otro lenguaje de etiquetas por un parser (un programa que trasforma unas etiquetas en otras). Esto se puede hacer en el caso de markdown y whatsapp, que es un caso sencillo, pero también puede ser que queramos convertir un libro entero formateado en markdown e importarlo en indesign: utilizando pandoc (un programa de manipulación y conversión de texto) y una sencilla orden, lo podemos hacer instantáneamente. Lo más importante: un archivo de texto plano formateado en markdown nos permite convertirlo en un PDF para imprenta (vía pandoc e indesign), en una página web (vía pandoc), en un epub (idem) y renderizarlo por un lector de Braille sin problemas y casi instantaneamente. Separar contenido de su presentación. La principal ventaja de trabajar en texto plano es la separación de contenido y apariencia, lo que equivale a decir que la estructura semántica del texto y su diseño van aparte. En lugar de utilizar una fuente extraña y en cuerpo más grande para señalar un título, lo que hacemos es etiquetar el texto como título y luego, en una hoja de estilo aparte (panel de estilos en InDesign, CSS en HTML y EPUB, un template en Latex) podemos personalizar la manera en que ese contenido se presentará según el formato de salida o el dispositivo que vaya a renderizarlo. Esto permite que un mismo texto, estructurado de la misma manera, pueda, asociandolo a unas instrucciones determinadas, ser una página web, un ebook, una aplicación móvil, y un PDF para imprenta, sin tocar el documento en si mismo. Naturalmente, es necesario escribir (o adaptar) estas hojas de estilo, pero si tenemos una editorial y vamos a producir muchos libros que se parecen (usan la misma tipografía, o comparten un diseño base) esto será trabajo de una vez. Esto también permitirá (si el archivo está bien estructurado) que nuestro contenido sea accesible de origen. Control de versiones Otra de las ventajas de los archivos de texto plano es que nos permiten utilizar sofisticadísimos sistemas de control de versiones. El más conocido, pero no el único, es GIT. GIT es un software de control de versiones distribuido, lo que significa que cada copia de un archivo sometido a control de versiones se encuentra simultaneamente en todos los computadores de quienes trabajan en ese archivo. Y Git puede recordar cada uno de los cambios que los usuarios han hecho en el archivo. De manera que no hay manera que un azar desafortunado se lleve tu trabajo. Git sabe donde está. Pero no sólo puede hacer esto: controlar versiones para GIT no sólo significa que puede llevar un registro de cada cosa que hallas hecho sino también que te da la posibilidad de crear ramas alternativas de tu trabajo para que ensayes y experimentes sin tocar la parte ya definitiva de tu trabajo. Esto permite también que puedas crear versiones distintas de tu contenido (por ejemplo, para diferentes formatos o diferentes audiencias, imaginate la traducción de un libro con una versión española y otra neutra y otra en chileno profundo) dentro del mismo archivo. Y esto, que se dice rápido, significa librarse de esas carpetas infinitas llenas de words (version_final.docx, version_final_corregida.docx, version_final_correccion_03-05-2022.docx, etc…) GIT fue diseñado por el creador de Linux, Linus Torvald, como sistema de control de versiones para los desarrolladores de software. pero el software y los libros comparten muchas cosas. La principal: son texto. Pero no todo acaba aquí. Existen numerosas plataformas en la nube creadas con Git como base. La más conocida (no la única) es GitHub. Y entre sus caracteristicas están darte un espacio (libre y gratuito) para que mantengas tus archivos organizados en repositorios, manejes lo que quieres compartir de ellos, y hasta puedas crearte una página web. Los archivos de texto plano también te dan la posibilidad de montarte tu propia nube. Sostenibilidad Mi primer computador fue un 286 que me vendió un amigo. No tenía Windows, de manera que la forma de trabajar con él a través de la línea de comandos. Cuando lo encendía, sonaba como un refrigerador. Y tenía una pantalla deliciosa, con unas muy coquetas letras verdes. Lo usaba mayormente para escribir mis trabajos de la universidad y algún que otro cuento. Después de ese computador, vinieron otros. Apareció Windows. Cambién los floppy disks por CDs y luego estos por Pendrives. Cómo todo el mundo, terminé mudandome muy rápidamente a Word. Principalmente, por que estaba en todas partes. Y por que Wordperfect, que era el programa que yo utilizaba para escribir, desapareció en algún momento durante el cambio de milenio. Y fui acumulando decenas, cientos y luego miles de cds, dvds, pendrives y discos duros. Después de haber migrado entre sistemas operativos y haber trasladado archivos de textos de un dispositivo a otro y luego a la nube, y haber intentado leerlos una y otra vez a lo largo de los años, puedo decir que que la cantidad de tiempo que he perdido intentando descifrar documentos de word en otros programas o en una versión distinta de word, me habría dado tiempo para escribir un par de novelas y hasta una opera. Porque word o cualquier otro procesador de texto que sea software propietario y esté protegido por una licencia comercial puede desaparecer mañana o cambiar o enloquecer completamente y ahi quedarán tus documentos: extraviados en la tierra de nadie de los archivos huerfanos. Como pasó con mis documentos de Wordperfect o mis viejos words, que si ahora intentara abrir probablemente haría que mi laptop estallara en pedazos. Esto puede parecer un imposible, pero cosas más extrañas han pasado. Lycos, Geocities, MySpace, WordPerfect, OpenOffice… la lista de software o plataformas que en algun momento parecían sólidas y dignas de toda confianza que han desaparecido es interminable. Si de lo que se trata es de mantener archivos domésticos o tus trabajos de universidad, tal vez pueda moderarse la preocupación. pero si estamos hablando de construir un catálogo, mantener un archivo de documentos, o almacenar todos los números de una revista, tal vez habría que pensar en la sostenibilidad del formato que escogemos. Sobretodo si se trata de contenidos que queremos reciclar o tener a mano. Tal vez la mejor opción sea buscar un formato que no tenga capas ocultas y que cualquier máquina, ahora o en el siglo XXX pueda abrir. Y que sea ligero y que minimize el error y pueda someterse a control de versiones. Y que pese poco y pueda ser almacenado sin que la cuestión del espacio sea una preocupación (alguién alguna vez pensó que iba a llenar el mailbox de Google…? ). O sea: un archivo de texto plano.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/leaves.jpg" /><media:content medium="image" url="http://localhost:4000/leaves.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">La gran novela americana</title><link href="http://localhost:4000/la-gran-novela-americana/" rel="alternate" type="text/html" title="La gran novela americana" /><published>2021-11-13T00:00:00+01:00</published><updated>2021-11-13T00:00:00+01:00</updated><id>http://localhost:4000/la-gran-novela-americana</id><content type="html" xml:base="http://localhost:4000/la-gran-novela-americana/">&lt;p&gt;La gran novela americana (1923) es una novela experimental de William Carlos Williams. Aunque se le conoce sobre todo como poeta, Williams amplió con frecuencia los límites de la prosa a lo largo de su carrera. En la década decisiva del modernismo, Williams intentó probar la llamada “Gran Novela Americana”, un concepto que alimentó un apasionado debate en los círculos académicos y artísticos de todo el país. Lejos de ser convencional, la novela de Williams es una incursión metaficcional en asuntos más posmodernos que modernos, un comentario disfrazado de narración y una sátira de la excesiva dependencia de los clichés en forma y contenido. “Si hay progreso, hay novela. Sin progreso no hay nada. Todo existe desde el principio. Yo existía al principio. Yo era un bebé baboso. Hoy he visto hierbas sin nombre… He golpeado la tierra con el nudillo. Sonaba a hueco. Estaba seca como el caucho. Eones de sequía. No ha llovido en quince días. No ha llovido. Nunca ha llovido. Nunca lloverá”. La novela de Williams comienza con la palabra y un nacimiento. El lenguaje describe la experiencia de despertar a la experiencia, de llegar a la conciencia como un ser vivo en un mundo vivo. Utilizando palabras del habla cotidiana, construye una novela a partir de observaciones, un libro que permanece consciente de sí mismo en todo momento. Al igual que el niño cuya primera experiencia con la palabra escrita suele provenir de nombres y eslóganes extendidos sobre camiones y vallas publicitarias, el lector acaba aceptando su nueva realidad, un mundo en el que la gente ama y triunfa y fracasa, en el que la historia y el arte interceden para dar sentido a lo que pueden. La Gran Novela Americana muestra la forma experimental de Williams, estirando el significado de “novela” hasta su límite más lejano.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Libros" /><category term="feminismo" /><summary type="html">La gran novela americana (1923) es una novela experimental de William Carlos Williams. Aunque se le conoce sobre todo como poeta, Williams amplió con frecuencia los límites de la prosa a lo largo de su carrera. En la década decisiva del modernismo, Williams intentó probar la llamada “Gran Novela Americana”, un concepto que alimentó un apasionado debate en los círculos académicos y artísticos de todo el país. Lejos de ser convencional, la novela de Williams es una incursión metaficcional en asuntos más posmodernos que modernos, un comentario disfrazado de narración y una sátira de la excesiva dependencia de los clichés en forma y contenido. “Si hay progreso, hay novela. Sin progreso no hay nada. Todo existe desde el principio. Yo existía al principio. Yo era un bebé baboso. Hoy he visto hierbas sin nombre… He golpeado la tierra con el nudillo. Sonaba a hueco. Estaba seca como el caucho. Eones de sequía. No ha llovido en quince días. No ha llovido. Nunca ha llovido. Nunca lloverá”. La novela de Williams comienza con la palabra y un nacimiento. El lenguaje describe la experiencia de despertar a la experiencia, de llegar a la conciencia como un ser vivo en un mundo vivo. Utilizando palabras del habla cotidiana, construye una novela a partir de observaciones, un libro que permanece consciente de sí mismo en todo momento. Al igual que el niño cuya primera experiencia con la palabra escrita suele provenir de nombres y eslóganes extendidos sobre camiones y vallas publicitarias, el lector acaba aceptando su nueva realidad, un mundo en el que la gente ama y triunfa y fracasa, en el que la historia y el arte interceden para dar sentido a lo que pueden. La Gran Novela Americana muestra la forma experimental de Williams, estirando el significado de “novela” hasta su límite más lejano.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/gran_novela.jpg" /><media:content medium="image" url="http://localhost:4000/gran_novela.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Púrpura imperial</title><link href="http://localhost:4000/purpura-imperial/" rel="alternate" type="text/html" title="Púrpura imperial" /><published>2021-11-13T00:00:00+01:00</published><updated>2021-11-13T00:00:00+01:00</updated><id>http://localhost:4000/purpura-imperial</id><content type="html" xml:base="http://localhost:4000/purpura-imperial/">&lt;p&gt;Precursor de la no ficción creativa, Edgar Saltus se inspira en los textos de Suetonio y Tácito para hacer un retrato subyugante de la Roma de los emperadores. Su propósito no es reconstruir los hechos históricos, sino capturar el espíritu de una civilización, haciéndonos respirar la atmósfera de su decadencia. Desde una visión muy pesimista de la naturaleza humana, el autor aborda el mal como una oportunidad para la belleza. Aunque en Púrpura imperial se relatan con admiración apenas contenida los excesos de los emperadores, no estamos ante una celebración de la depravación, sino de sus posibilidades estéticas. Para Saltus, los emperadores no eran peores que el resto de los mortales, pero, poderosos como dioses, podían conducir su abyección a los confines de lo posible. En esa circunstancia excepcional, donde está ausente toda moral, el autor vislumbra una ocasión única para demostrar su condición de gran estilista: en Púrpura imperial Saltus talla su prosa con la precisión de Flaubert, la imaginería decadente de Huysmans y la expresividad de Poe. El efecto es deslumbrante, un tapiz donde la belleza prevalece sobre el horror.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Libros" /><category term="feminismo" /><summary type="html">Precursor de la no ficción creativa, Edgar Saltus se inspira en los textos de Suetonio y Tácito para hacer un retrato subyugante de la Roma de los emperadores. Su propósito no es reconstruir los hechos históricos, sino capturar el espíritu de una civilización, haciéndonos respirar la atmósfera de su decadencia. Desde una visión muy pesimista de la naturaleza humana, el autor aborda el mal como una oportunidad para la belleza. Aunque en Púrpura imperial se relatan con admiración apenas contenida los excesos de los emperadores, no estamos ante una celebración de la depravación, sino de sus posibilidades estéticas. Para Saltus, los emperadores no eran peores que el resto de los mortales, pero, poderosos como dioses, podían conducir su abyección a los confines de lo posible. En esa circunstancia excepcional, donde está ausente toda moral, el autor vislumbra una ocasión única para demostrar su condición de gran estilista: en Púrpura imperial Saltus talla su prosa con la precisión de Flaubert, la imaginería decadente de Huysmans y la expresividad de Poe. El efecto es deslumbrante, un tapiz donde la belleza prevalece sobre el horror.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/purpura_imperial_cover_thumb.jpg" /><media:content medium="image" url="http://localhost:4000/purpura_imperial_cover_thumb.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">La cuestión de la mujer &amp;amp; otros textos sobre feminismo y revolución</title><link href="http://localhost:4000/eleanor-marx/" rel="alternate" type="text/html" title="La cuestión de la mujer &amp;amp; otros textos sobre feminismo y revolución" /><published>2021-11-03T00:00:00+01:00</published><updated>2021-11-03T00:00:00+01:00</updated><id>http://localhost:4000/eleanor-marx</id><content type="html" xml:base="http://localhost:4000/eleanor-marx/">&lt;p&gt;Precursor de la no ficción creativa, Edgar Saltus se inspira en los textos de Suetonio y Tácito para hacer un retrato subyugante de la Roma de los emperadores. Su propósito no es reconstruir los hechos históricos, sino capturar el espíritu de una civilización, haciéndonos respirar la atmósfera de su decadencia. Desde una visión muy pesimista de la naturaleza humana, el autor aborda el mal como una oportunidad para la belleza. Aunque en Púrpura imperial se relatan con admiración apenas contenida los excesos de los emperadores, no estamos ante una celebración de la depravación, sino de sus posibilidades estéticas. Para Saltus, los emperadores no eran peores que el resto de los mortales, pero, poderosos como dioses, podían conducir su abyección a los confines de lo posible. En esa circunstancia excepcional, donde está ausente toda moral, el autor vislumbra una ocasión única para demostrar su condición de gran estilista: en Púrpura imperial Saltus talla su prosa con la precisión de Flaubert, la imaginería decadente de Huysmans y la expresividad de Poe. El efecto es deslumbrante, un tapiz donde la belleza prevalece sobre el horror.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Libros" /><category term="feminismo" /><summary type="html">Precursor de la no ficción creativa, Edgar Saltus se inspira en los textos de Suetonio y Tácito para hacer un retrato subyugante de la Roma de los emperadores. Su propósito no es reconstruir los hechos históricos, sino capturar el espíritu de una civilización, haciéndonos respirar la atmósfera de su decadencia. Desde una visión muy pesimista de la naturaleza humana, el autor aborda el mal como una oportunidad para la belleza. Aunque en Púrpura imperial se relatan con admiración apenas contenida los excesos de los emperadores, no estamos ante una celebración de la depravación, sino de sus posibilidades estéticas. Para Saltus, los emperadores no eran peores que el resto de los mortales, pero, poderosos como dioses, podían conducir su abyección a los confines de lo posible. En esa circunstancia excepcional, donde está ausente toda moral, el autor vislumbra una ocasión única para demostrar su condición de gran estilista: en Púrpura imperial Saltus talla su prosa con la precisión de Flaubert, la imaginería decadente de Huysmans y la expresividad de Poe. El efecto es deslumbrante, un tapiz donde la belleza prevalece sobre el horror.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/eleanor_marx_2.jpg" /><media:content medium="image" url="http://localhost:4000/eleanor_marx_2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Edición sostenible con pandoc, markdown y git. Parte 3: Formatear</title><link href="http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-3/" rel="alternate" type="text/html" title="Edición sostenible con pandoc, markdown y git. Parte 3: Formatear" /><published>2020-08-26T02:00:00+02:00</published><updated>2020-08-26T02:00:00+02:00</updated><id>http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-3</id><content type="html" xml:base="http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-3/">&lt;h2 id=&quot;formatear&quot;&gt;Formatear&lt;/h2&gt;

&lt;h3 id=&quot;preparar-el-ms&quot;&gt;Preparar el MS&lt;/h3&gt;

&lt;p&gt;De momento tenemos una carpeta, una serie de subcarpetas, y un único archivo. Pero, ¿no íbamos a partir desde markdown? En efecto. Por tanto, lo primero que haremos será convertir el documento base &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidFinal.docx&apos;&lt;/code&gt; a markdown. Y aquí es dónde entra Pandoc.&lt;/p&gt;

&lt;p&gt;Pandoc es un software de linea de comandos (CLI), creado y mantenido por John MacFarlane, profesor de Filosofía en la Universidad de California en Berkeley. Muy brevemente, se puede describir como un conversor universal de formatos de texto. Pero es mucho más. Y puesto que fue concebido por un académico y con el objetivo de servir de herramientas a académicos, cuenta entre sus virtudes la capacidad de manejar metadata, referencias bibliograficas y sistemas de citación que mejoran casi cualquier herramienta dedicada a estas tareas. Hablaremos más adelante más en detalles de qué hace y cómo lo hace, de momento (y como demostración de lo que es capaz), vamos a navegar a la carpeta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;, que contiene el documento &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidFinal.docx&lt;/code&gt; y vamos a abrir la línea de comandos ahí. En Windows, sencillamente hay que abrir la carpeta correspondiente y hacer click en Archivo &amp;gt; abrir Windows Power Shell:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/lineaDeComandos.png&quot; alt=&quot;linea de comandos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;y cuando se abra el Power Shell, vamos a escribir:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; pandoc mioCidFinal.docx -f docx+empty_paragraphs -t markdown --wrap=none --atx -o mioCidCampeador.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Si ahora miramos de nuevo en la carpeta, veremos que un nuevo archivo (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidCampeador.md&lt;/code&gt;) ha aparecido en ella.&lt;/p&gt;

&lt;p&gt;¿Qué hemos hecho? Paso por paso, es lo siguiente:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hemos invocado el programa que vamos a utilizar (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;le hemos dicho a qué archivo tiene que aplicar las opciones que vamos a definir (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidFinal.docx&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;le hemos dicho desde qué formato tiene que partir y cómo tratarlo: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;, de &lt;em&gt;from&lt;/em&gt;, desde, en inglés; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docx&lt;/code&gt;, es el formato de partida; la opción &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;empty_paragraphs&lt;/code&gt; le dice a Pandoc que queremos que limpie el archivo de todas las líneas vacías. Pandoc va a preservar todos los estilos predeterminados (encabezados) y estilos locales (itálicas y negritas), traduciéndolos a etiquetas en markdown, pero va a ignorar todos los estilos personalizados que hubiéramos podido definir en el documento (en caso de que quisieramos conservar los estilos personalizados de word, hay una opción: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+styles&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;le hemos dicho a qué formato
tiene que convertir el documento: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t markdown&lt;/code&gt;, a markdown.&lt;/li&gt;
  &lt;li&gt;Le hemos dicho que elimine el ajuste de línea (word wrap) o saltos de línea no semánticos: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrap=none&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Que uniforme los encabezados (markdown tiene dos maneras de etiquetar encabezados, atx o setext-style headers): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--atx&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;y que con toda esta información, cree un archivo llamado &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidCampeador.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pandoc ha hecho todo eso en un par de segundos.&lt;/p&gt;

&lt;h3 id=&quot;markdown&quot;&gt;Markdown&lt;/h3&gt;

&lt;p&gt;Ahora podemos abrir el directorio de nuestro proyecto con nuestro editor de texto y veremos el árbol de carpetas:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/abrirCarpetaDeTrabajoConElEditorDeTexto.png&quot; alt=&quot;projectFolderEnAtom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Abrimos el archivo mioCidCampeador.md (doble click en el panel de la derecha) y
podemos ver lo que pandoc ha hecho. Los encabezados están correctamente distribuidos a lo largo del documento, el formato local se ha preservado. Incluso, podemos ver que Pandoc ha interpretado una tabla en el documento Word y la ha trasladado a markdown correctamente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tablasEnMarkdown.png&quot; alt=&quot;tablas (convertidas desde Word) en markdown&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como en cualquier manuscrito, es probable que halla numerosas correcciones que hacer, pero aquí tenemos una buena base. Volveremos al tema de las correcciones más adelante&lt;/p&gt;

&lt;p&gt;De momento, vamos a sumir que la conversión fue exitosa. Podemos abrir el Outline del documento y verificar la estructura del documento, eso es ahora lo que más nos importa.
Markdown tiene una sintaxis extremadamente sencilla de aprender. Si miramos el documento, podemos ver que:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;los encabezados están marcados por hashes (#): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# este es un título de primer nivel&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;## este es un título de segundo nivel&lt;/code&gt;, etc…&lt;/li&gt;
  &lt;li&gt;las itálicas corresponden a las palabras (o frases) encerradas entre dos asteriscos (&lt;em&gt;palabra_italicas&lt;/em&gt;) y que las negritas lo están entre dos asteriscos (&lt;strong&gt;esta_es_una_palabra_en_negritas&lt;/strong&gt;).&lt;/li&gt;
  &lt;li&gt;Las tablas se construyen con una combinación de guiones y barras verticales.&lt;/li&gt;
  &lt;li&gt;Las listas numeradas, con el número, un punto y un espacio (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1. item_de_lista&lt;/code&gt;) y las listas sin numerar con guión y espacio (- item_de_lista_sin_numerar)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/markdown_ejemplo.png&quot; alt=&quot;ejemplo sintaxis markdown&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para una referencia de la sintaxis markdown, &lt;a href=&quot;http://https://pandoc.org/MANUAL.html#pandocs-markdown&quot;&gt;aquí&lt;/a&gt; está la página de referencia.&lt;/p&gt;

&lt;h3 id=&quot;generar-html-a-partir-de-markdown&quot;&gt;Generar HTML a partir de Markdown&lt;/h3&gt;

&lt;p&gt;En un archivo HTML o EPUB (que en términos muy bastos no es otra cosa que un conjunto de archivos HTML: algo así como una página web comprimida y preparada para que la lea un dispositivo especializado) podemos distinguir dos secciones diferenciadas: el elemento &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head&lt;/code&gt; y el elemento &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;. El &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; es el contenido que es renderizado por un navegador (o por un software de lectura, en el caso de un archivo ‘epub’) y se muestra en la pantalla del dispositivo. El elemento ‘head’ en cambio contiene todo lo que necesita saber el software que va a renderizar la página para mostrarla correctamente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot; dir=&quot;ltr&quot;&amp;gt;
  &amp;lt;head&amp;gt;

    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;mi libro&amp;lt;/title&amp;gt;

  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt; Este es el título del documento&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt; y aqui viene el cuerpo de texto&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Este ejemplo muestra cómo se estructura un archivo ‘html’ muy básico. Pandoc es capaz de convertir un archivo markdown a HTML, incluyendo en éste toda la estructura semántica que hemos añadido al texto. Si convertimos el archivo del &lt;em&gt;Mio Cid Campeador&lt;/em&gt; a HTML utilizando Pandoc (lo podemos hacer situándonos con el Power Shell en la carpeta donde está el archivo markdown y escribiendo: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc MioCidCampeador.md -f markdown -t html -o MioCidCampeador.html&lt;/code&gt;), va a convertir el archivo de esta manera:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;h2 id=&quot;nota-de-los-editores1&quot;&amp;gt;Nota de los editores&amp;lt;a href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;No necesitamos presentar al público a Vicente Huidobro, poeta de fama mundial y que fue el iniciador de la mas nueva modalidad poética. De él nacieron el creacionismo y el ultraísmo y muchos otros &amp;lt;em&amp;gt;ismos&amp;lt;/em&amp;gt; más o menos legítimos que corren por el mundo.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Después de cuatro años de silencio, en que tal vez asqueado del ambiente y la vida literaria el poeta se refugió en sí mismo, hoy sale otra vez al público y se presenta con una obra maestra. Maestra por su fuerza lírica, por su fuerza de pasión, por su originalidad de fondo y forma.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;¿Donde está el elemnto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head&lt;/code&gt;?
Lo que ha hecho Pandoc es convertir a etiquetas HTML todo el documento markdown, pero dado que no le hemos dicho explícitamente que queríamos un documento independiente, con sus elementos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;, no lo ha hecho. Esto puede parecer una limitación, pero en efecto es extremadamente útil cuando lo que queremos es sencillamente HTML puro para insertarlo en otro documento. Para que haga el trabajo completo, tenemos que agregar la opción &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt; (por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;standalone&lt;/code&gt;, lo que a pandoc le dice que lo queremos es un documento independiente).&lt;/p&gt;

&lt;p&gt;Si ahora reescribimos la orden:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc MioCidCampeador.md -f markdown -s -t html -o MioCidCampeador.html&lt;/code&gt;, van a pasar dos cosas:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Pandoc va a crear el documento de la manera que esperamos:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
  &amp;lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&amp;gt;
  &amp;lt;title&amp;gt;MioCidCampeador&amp;lt;/title&amp;gt;
  &amp;lt;style&amp;gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &amp;lt;/style&amp;gt;
  &amp;lt;!--[if lt IE 9]&amp;gt;
    &amp;lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;![endif]--&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h2 id=&quot;nota-de-los-editores1&quot;&amp;gt;Nota de los editores&amp;lt;a href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;No necesitamos presentar al público a Vicente Huidobro, poeta de fama mundial y que fue el iniciador de la mas nueva modalidad poética. De él nacieron el creacionismo y el ultraísmo y muchos otros &amp;lt;em&amp;gt;ismos&amp;lt;/em&amp;gt; más o menos legítimos que corren por el mundo.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Después de cuatro años de silencio, en que tal vez asqueado del ambiente y la vida literaria el poeta se refugió en sí mismo, hoy sale otra vez al público y se presenta con una obra maestra. Maestra por su fuerza lírica, por su fuerza de pasión, por su originalidad de fondo y forma.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2) Y nos va a arrojar un mensaje de error:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[WARNING] This document format requires a nonempty &amp;lt;title&amp;gt; element.
Defaulting to &apos;MioCidCampeador&apos; as the title.
To specify a title, use &apos;title&apos; in metadata or --metadata title=&quot;...&quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Este mensaje significa que Pandoc ha sido capaz de crear el documento, pero dado que no le hemos indicado qué metadata utilizar, lo ha construido a partir de sus valores por defecto. Como, según la especificación, lo único imprescindible es que un documento tenga un título, Pandoc ha creado un título a partir del nombre del archivo.&lt;/p&gt;

&lt;h3 id=&quot;metadata&quot;&gt;Metadata&lt;/h3&gt;

&lt;p&gt;Ya sabemos como Pandoc puede convertir automáticamente un documento markdown a HTML (sobre cómo se convierte a EPUB, lo veremos más adelante, pero el principio es el mismo). Lo que necesitamos ahora es aprender a alimentar a Pandoc con metadata para que este pueda escribirla en HTML (y en epub).&lt;/p&gt;

&lt;p&gt;Existen varias maneras de preparar un archivo de metadata, la manera más simple es incluirla dentro del archivo markdown utilizando un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml block&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;Yaml&lt;/a&gt; es un lenguaje de serialización de datos, diseñado para ser legible tanto por software como por humanos y es el lenguaje que utiliza por defecto Pandoc para manipular metadatos. Se puede utilizar dentro de un archivo markdown pero también como un archivo independiente. En este último caso, el archivo tiene la extensión &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matadata.yaml&lt;/code&gt;, por ejemplo). Para nuestro caso, lo integraremos dentro de nuestro archivo markdown. Un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml block&lt;/code&gt; se escribe al principio del archivo markdown, utilizando tres guiones para encapsularlo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: mi libro
author: yo mismo
date: 07-28-2020
---

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Este sería el ejemplo más elemental. A partir de esta información, pandoc puede poblar las etiquetas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author&lt;/code&gt; en el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header&lt;/code&gt; y también podrá utilizar esta información para crear un bloque de título en HTML con el título del documento, el autor, y la fecha en que fue creado. ¿Por que es bueno que hagamos esto? Porque la información que incluyamos en la cabecera del documento HTML una vez sea accesible en la web, es la información que utilizará el motor de búsqueda para indexar el documento. Una página web sin metadata es una página web invisible.&lt;/p&gt;

&lt;p&gt;De la misma manera, Pandoc utiliza la metadata que especifiquemos para incorporarla en el archivo epub, de manera que luego esté disponible para que el dispositivo pueda mostrárnosla (en la biblioteca del aparato, por ejemplo).&lt;/p&gt;

&lt;p&gt;En síntesis, Yaml es una manera de mapear etiquetas o variables con valores.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; (etiqueta) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;: Mío Cid Campeador&lt;/code&gt; (valor asignado a esa etiqueta)&lt;/p&gt;

&lt;p&gt;Hay que notar que no hace falta utilizar comillas. Pero si el valor que estamos asignando contiene comillas (o cualquier caracter especial) es mejor entrecomillarlo (y utilizar las comillas simples para el texto que estamos asignando):&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title: &quot;Mío Cid Campeador, una &apos;relectura&apos; de la historia del Cid&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;También es importante tener en cuenta que Yaml es una manera de estructurar datos, no un lenguaje reservado o una especificación para expresar esos datos. Lo que significa que en realidad podemos utilizar las etiquetas o variables que necesitemos de manera arbitraria. Pandoc puede interpretar un conjunto importante de etiquetas, pero si nos parece insuficiente, podemos editar las plantillas y utilizar las que necesitemos (de esto hablaremos más adelante)&lt;/p&gt;

&lt;p&gt;Ahora volvamos a nuestro libro. En la misma carpeta donde tenemos el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidCampeador.md&lt;/code&gt; vamos a crear un nuevo archivo y le vamos a llamar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;metadata.yaml&lt;/code&gt;. En el vamos a escribir lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: Mío Cid Campeador
subtitle: Hazaña
author: Vicente Huidobro
creator:
- role: editor
  text: Lucho Tapia

identifier:
- scheme: ISBN-13
  text: 978-84-939173-9-5

date: 2020-04-07

description: &quot;Publicada en Madrid en 1931, esta novela de Huidobro es una réplica del clásico Cantar De Mío Cid, en la que propone una reinvención del mítico héroe medieval español. A partir de una conversación con el actor norteamericano Douglas Fairbanks, quien lo entusiasma con la figura del Cid y le pide una recopilación de datos, el poeta se documenta abundantemente y descubre, en su propia genealogía, un lejano vínculo con el legendario Rodrigo. La fascinación crece y Huidobro, a su manera se reencarna en él, se viste con su armadura y se lanza en esta epopeya por los campos de batalla de la creación, derribando, una vez más, las rigideces expresivas contra las que siempre luchó y logrando una narración de vanguardia. Huidobro legitima su relato, tal como él mismo lo señala en el prefacio, como &apos;la verdadera historia del Mío Cid Campeador, escrita por el último de sus descendientes&apos;&quot;

publisher: La Vorágine
keywords: literatura chilena, surrealismo, creacionismo, literatura contemporanea
rights: © 2020 La vorágine, CC BY-NC
lang: es-ES
cover-image: ../imagenes/el_mio_cid_campeador.jpg
css: ../epub/style.css
toc: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lo guardamos y luego volvemos al Power Shell y escribimos:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc MioCidCampeador.md metadata.yaml -f markdown -s -t html -o MioCidCampeador.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;y lo que obtendremos será esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/html_con_metadata_en_head.png&quot; alt=&quot;metadata incluida en html via yaml file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nótese que también podemos generar un archivo epub:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc MioCidCampeador.md metadata.yaml -f markdown -s -t epub3 -o MioCidCampeador.epub&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;y el resultado (si abrimos el epub y miramos en el archivo content.opf ):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/epub_metadata_via_yaml.png&quot; alt=&quot;epub metadata via yaml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En primer caso (conversión a html) pandoc creaba etiquetas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;meta name=&quot;&lt;/code&gt;etiqueta&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot; content=&quot;&lt;/code&gt;valor_de_la_etiqueta&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot; /&amp;gt;&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;meta name=&quot;author&quot; content=&quot;Vicente Huidobro&quot; /&amp;gt;&lt;/code&gt;), que es la manera standar para incluir metadata en html para la web. En el segundo caso, Pandoc introdujo la metadata utilizando los cuatro vocabularios reservados para metadata en la especificación epub3 (dcterms, marc relators, media y onix). Todo partiendo de un mismo archivo.&lt;/p&gt;

&lt;p&gt;Más adelante veremos otros usos de Yaml y volveremos sobre la generación de Epubs.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="Edicion digital" /><category term="Proyectos" /><summary type="html">Formatear Preparar el MS De momento tenemos una carpeta, una serie de subcarpetas, y un único archivo. Pero, ¿no íbamos a partir desde markdown? En efecto. Por tanto, lo primero que haremos será convertir el documento base mioCidFinal.docx&apos; a markdown. Y aquí es dónde entra Pandoc. Pandoc es un software de linea de comandos (CLI), creado y mantenido por John MacFarlane, profesor de Filosofía en la Universidad de California en Berkeley. Muy brevemente, se puede describir como un conversor universal de formatos de texto. Pero es mucho más. Y puesto que fue concebido por un académico y con el objetivo de servir de herramientas a académicos, cuenta entre sus virtudes la capacidad de manejar metadata, referencias bibliograficas y sistemas de citación que mejoran casi cualquier herramienta dedicada a estas tareas. Hablaremos más adelante más en detalles de qué hace y cómo lo hace, de momento (y como demostración de lo que es capaz), vamos a navegar a la carpeta src, que contiene el documento mioCidFinal.docx y vamos a abrir la línea de comandos ahí. En Windows, sencillamente hay que abrir la carpeta correspondiente y hacer click en Archivo &amp;gt; abrir Windows Power Shell: y cuando se abra el Power Shell, vamos a escribir: pandoc mioCidFinal.docx -f docx+empty_paragraphs -t markdown --wrap=none --atx -o mioCidCampeador.md Si ahora miramos de nuevo en la carpeta, veremos que un nuevo archivo (mioCidCampeador.md) ha aparecido en ella. ¿Qué hemos hecho? Paso por paso, es lo siguiente: hemos invocado el programa que vamos a utilizar (pandoc) le hemos dicho a qué archivo tiene que aplicar las opciones que vamos a definir (mioCidFinal.docx) le hemos dicho desde qué formato tiene que partir y cómo tratarlo: -f, de from, desde, en inglés; docx, es el formato de partida; la opción empty_paragraphs le dice a Pandoc que queremos que limpie el archivo de todas las líneas vacías. Pandoc va a preservar todos los estilos predeterminados (encabezados) y estilos locales (itálicas y negritas), traduciéndolos a etiquetas en markdown, pero va a ignorar todos los estilos personalizados que hubiéramos podido definir en el documento (en caso de que quisieramos conservar los estilos personalizados de word, hay una opción: +styles). le hemos dicho a qué formato tiene que convertir el documento: -t markdown, a markdown. Le hemos dicho que elimine el ajuste de línea (word wrap) o saltos de línea no semánticos: wrap=none Que uniforme los encabezados (markdown tiene dos maneras de etiquetar encabezados, atx o setext-style headers): --atx y que con toda esta información, cree un archivo llamado mioCidCampeador.md Pandoc ha hecho todo eso en un par de segundos. Markdown Ahora podemos abrir el directorio de nuestro proyecto con nuestro editor de texto y veremos el árbol de carpetas: Abrimos el archivo mioCidCampeador.md (doble click en el panel de la derecha) y podemos ver lo que pandoc ha hecho. Los encabezados están correctamente distribuidos a lo largo del documento, el formato local se ha preservado. Incluso, podemos ver que Pandoc ha interpretado una tabla en el documento Word y la ha trasladado a markdown correctamente: Como en cualquier manuscrito, es probable que halla numerosas correcciones que hacer, pero aquí tenemos una buena base. Volveremos al tema de las correcciones más adelante De momento, vamos a sumir que la conversión fue exitosa. Podemos abrir el Outline del documento y verificar la estructura del documento, eso es ahora lo que más nos importa. Markdown tiene una sintaxis extremadamente sencilla de aprender. Si miramos el documento, podemos ver que: los encabezados están marcados por hashes (#): # este es un título de primer nivel, ## este es un título de segundo nivel, etc… las itálicas corresponden a las palabras (o frases) encerradas entre dos asteriscos (palabra_italicas) y que las negritas lo están entre dos asteriscos (esta_es_una_palabra_en_negritas). Las tablas se construyen con una combinación de guiones y barras verticales. Las listas numeradas, con el número, un punto y un espacio (1. item_de_lista) y las listas sin numerar con guión y espacio (- item_de_lista_sin_numerar) Para una referencia de la sintaxis markdown, aquí está la página de referencia. Generar HTML a partir de Markdown En un archivo HTML o EPUB (que en términos muy bastos no es otra cosa que un conjunto de archivos HTML: algo así como una página web comprimida y preparada para que la lea un dispositivo especializado) podemos distinguir dos secciones diferenciadas: el elemento head y el elemento body. El body es el contenido que es renderizado por un navegador (o por un software de lectura, en el caso de un archivo ‘epub’) y se muestra en la pantalla del dispositivo. El elemento ‘head’ en cambio contiene todo lo que necesita saber el software que va a renderizar la página para mostrarla correctamente: &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&quot;en&quot; dir=&quot;ltr&quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;title&amp;gt;mi libro&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt; Este es el título del documento&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt; y aqui viene el cuerpo de texto&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Este ejemplo muestra cómo se estructura un archivo ‘html’ muy básico. Pandoc es capaz de convertir un archivo markdown a HTML, incluyendo en éste toda la estructura semántica que hemos añadido al texto. Si convertimos el archivo del Mio Cid Campeador a HTML utilizando Pandoc (lo podemos hacer situándonos con el Power Shell en la carpeta donde está el archivo markdown y escribiendo: pandoc MioCidCampeador.md -f markdown -t html -o MioCidCampeador.html), va a convertir el archivo de esta manera: &amp;lt;h2 id=&quot;nota-de-los-editores1&quot;&amp;gt;Nota de los editores&amp;lt;a href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;No necesitamos presentar al público a Vicente Huidobro, poeta de fama mundial y que fue el iniciador de la mas nueva modalidad poética. De él nacieron el creacionismo y el ultraísmo y muchos otros &amp;lt;em&amp;gt;ismos&amp;lt;/em&amp;gt; más o menos legítimos que corren por el mundo.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Después de cuatro años de silencio, en que tal vez asqueado del ambiente y la vida literaria el poeta se refugió en sí mismo, hoy sale otra vez al público y se presenta con una obra maestra. Maestra por su fuerza lírica, por su fuerza de pasión, por su originalidad de fondo y forma.&amp;lt;/p&amp;gt; ¿Donde está el elemnto head? Lo que ha hecho Pandoc es convertir a etiquetas HTML todo el documento markdown, pero dado que no le hemos dicho explícitamente que queríamos un documento independiente, con sus elementos head y body, no lo ha hecho. Esto puede parecer una limitación, pero en efecto es extremadamente útil cuando lo que queremos es sencillamente HTML puro para insertarlo en otro documento. Para que haga el trabajo completo, tenemos que agregar la opción -s (por standalone, lo que a pandoc le dice que lo queremos es un documento independiente). Si ahora reescribimos la orden: pandoc MioCidCampeador.md -f markdown -s -t html -o MioCidCampeador.html, van a pasar dos cosas: Pandoc va a crear el documento de la manera que esperamos: &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt; &amp;lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&amp;gt; &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&amp;gt; &amp;lt;title&amp;gt;MioCidCampeador&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;} &amp;lt;/style&amp;gt; &amp;lt;!--[if lt IE 9]&amp;gt; &amp;lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;![endif]--&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h2 id=&quot;nota-de-los-editores1&quot;&amp;gt;Nota de los editores&amp;lt;a href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;No necesitamos presentar al público a Vicente Huidobro, poeta de fama mundial y que fue el iniciador de la mas nueva modalidad poética. De él nacieron el creacionismo y el ultraísmo y muchos otros &amp;lt;em&amp;gt;ismos&amp;lt;/em&amp;gt; más o menos legítimos que corren por el mundo.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Después de cuatro años de silencio, en que tal vez asqueado del ambiente y la vida literaria el poeta se refugió en sí mismo, hoy sale otra vez al público y se presenta con una obra maestra. Maestra por su fuerza lírica, por su fuerza de pasión, por su originalidad de fondo y forma.&amp;lt;/p&amp;gt; 2) Y nos va a arrojar un mensaje de error: [WARNING] This document format requires a nonempty &amp;lt;title&amp;gt; element. Defaulting to &apos;MioCidCampeador&apos; as the title. To specify a title, use &apos;title&apos; in metadata or --metadata title=&quot;...&quot;. Este mensaje significa que Pandoc ha sido capaz de crear el documento, pero dado que no le hemos indicado qué metadata utilizar, lo ha construido a partir de sus valores por defecto. Como, según la especificación, lo único imprescindible es que un documento tenga un título, Pandoc ha creado un título a partir del nombre del archivo. Metadata Ya sabemos como Pandoc puede convertir automáticamente un documento markdown a HTML (sobre cómo se convierte a EPUB, lo veremos más adelante, pero el principio es el mismo). Lo que necesitamos ahora es aprender a alimentar a Pandoc con metadata para que este pueda escribirla en HTML (y en epub). Existen varias maneras de preparar un archivo de metadata, la manera más simple es incluirla dentro del archivo markdown utilizando un yaml block. Yaml es un lenguaje de serialización de datos, diseñado para ser legible tanto por software como por humanos y es el lenguaje que utiliza por defecto Pandoc para manipular metadatos. Se puede utilizar dentro de un archivo markdown pero también como un archivo independiente. En este último caso, el archivo tiene la extensión .yaml (matadata.yaml, por ejemplo). Para nuestro caso, lo integraremos dentro de nuestro archivo markdown. Un yaml block se escribe al principio del archivo markdown, utilizando tres guiones para encapsularlo: --- title: mi libro author: yo mismo date: 07-28-2020 --- Este sería el ejemplo más elemental. A partir de esta información, pandoc puede poblar las etiquetas title y author en el header y también podrá utilizar esta información para crear un bloque de título en HTML con el título del documento, el autor, y la fecha en que fue creado. ¿Por que es bueno que hagamos esto? Porque la información que incluyamos en la cabecera del documento HTML una vez sea accesible en la web, es la información que utilizará el motor de búsqueda para indexar el documento. Una página web sin metadata es una página web invisible. De la misma manera, Pandoc utiliza la metadata que especifiquemos para incorporarla en el archivo epub, de manera que luego esté disponible para que el dispositivo pueda mostrárnosla (en la biblioteca del aparato, por ejemplo). En síntesis, Yaml es una manera de mapear etiquetas o variables con valores. title (etiqueta) : Mío Cid Campeador (valor asignado a esa etiqueta) Hay que notar que no hace falta utilizar comillas. Pero si el valor que estamos asignando contiene comillas (o cualquier caracter especial) es mejor entrecomillarlo (y utilizar las comillas simples para el texto que estamos asignando): title: &quot;Mío Cid Campeador, una &apos;relectura&apos; de la historia del Cid&quot; También es importante tener en cuenta que Yaml es una manera de estructurar datos, no un lenguaje reservado o una especificación para expresar esos datos. Lo que significa que en realidad podemos utilizar las etiquetas o variables que necesitemos de manera arbitraria. Pandoc puede interpretar un conjunto importante de etiquetas, pero si nos parece insuficiente, podemos editar las plantillas y utilizar las que necesitemos (de esto hablaremos más adelante) Ahora volvamos a nuestro libro. En la misma carpeta donde tenemos el archivo mioCidCampeador.md vamos a crear un nuevo archivo y le vamos a llamar metadata.yaml. En el vamos a escribir lo siguiente: --- title: Mío Cid Campeador subtitle: Hazaña author: Vicente Huidobro creator: - role: editor text: Lucho Tapia identifier: - scheme: ISBN-13 text: 978-84-939173-9-5 date: 2020-04-07 description: &quot;Publicada en Madrid en 1931, esta novela de Huidobro es una réplica del clásico Cantar De Mío Cid, en la que propone una reinvención del mítico héroe medieval español. A partir de una conversación con el actor norteamericano Douglas Fairbanks, quien lo entusiasma con la figura del Cid y le pide una recopilación de datos, el poeta se documenta abundantemente y descubre, en su propia genealogía, un lejano vínculo con el legendario Rodrigo. La fascinación crece y Huidobro, a su manera se reencarna en él, se viste con su armadura y se lanza en esta epopeya por los campos de batalla de la creación, derribando, una vez más, las rigideces expresivas contra las que siempre luchó y logrando una narración de vanguardia. Huidobro legitima su relato, tal como él mismo lo señala en el prefacio, como &apos;la verdadera historia del Mío Cid Campeador, escrita por el último de sus descendientes&apos;&quot; publisher: La Vorágine keywords: literatura chilena, surrealismo, creacionismo, literatura contemporanea rights: © 2020 La vorágine, CC BY-NC lang: es-ES cover-image: ../imagenes/el_mio_cid_campeador.jpg css: ../epub/style.css toc: true --- Lo guardamos y luego volvemos al Power Shell y escribimos: pandoc MioCidCampeador.md metadata.yaml -f markdown -s -t html -o MioCidCampeador.html y lo que obtendremos será esto: Nótese que también podemos generar un archivo epub: pandoc MioCidCampeador.md metadata.yaml -f markdown -s -t epub3 -o MioCidCampeador.epub y el resultado (si abrimos el epub y miramos en el archivo content.opf ): En primer caso (conversión a html) pandoc creaba etiquetas &amp;lt;meta name=&quot;etiqueta&quot; content=&quot;valor_de_la_etiqueta&quot; /&amp;gt; (&amp;lt;meta name=&quot;author&quot; content=&quot;Vicente Huidobro&quot; /&amp;gt;), que es la manera standar para incluir metadata en html para la web. En el segundo caso, Pandoc introdujo la metadata utilizando los cuatro vocabularios reservados para metadata en la especificación epub3 (dcterms, marc relators, media y onix). Todo partiendo de un mismo archivo. Más adelante veremos otros usos de Yaml y volveremos sobre la generación de Epubs.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/leaves.jpg" /><media:content medium="image" url="http://localhost:4000/leaves.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Edición sostenible con pandoc, markdown y git. Parte 2: Objetivo, herramientas &amp;amp; requisitos</title><link href="http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-2/" rel="alternate" type="text/html" title="Edición sostenible con pandoc, markdown y git. Parte 2: Objetivo, herramientas &amp;amp; requisitos" /><published>2020-08-22T02:00:00+02:00</published><updated>2020-08-22T02:00:00+02:00</updated><id>http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-2</id><content type="html" xml:base="http://localhost:4000/edicion-sostenible-con-pandoc-markdown-y-git-parte-2/">&lt;p&gt;El propósito de este tutorial será mostrar desde un punto de vista práctico como combinar herramientas para crear un libro multiformato, de una mera sostenible y automatizada, y que, de paso, resuelve punto por punto nuestro problema..&lt;/p&gt;

&lt;p&gt;Este es únicamente un posible &lt;em&gt;workflow&lt;/em&gt; y desde luego que existen muchas otras herramientas y combinaciones. El punto que espero demostrar es únicamente la cantidad de herramientas que existen a nuestra disposición, que pueden transformar el proceso de producción de un libro hasta el punto de permitirnos automatizar todas las tareas, ganando en eficiencia y al mismo tiempo en control sobre nuestros proyectos.&lt;/p&gt;

&lt;p&gt;Para mostrar esto, voy a replantear mi proyecto (la edición de &lt;em&gt;Mío cid campeador&lt;/em&gt; de Vicente Huidobro) y rehacerlo desde el principio. Para ello:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Crearemos, a partir de los archivos que tenemos, un set de archivos fuente en markDown (texto plano con la extensión &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Luego crearemos un repositorio para albergar los archivos necesarios&lt;/li&gt;
  &lt;li&gt;Crearemos un archivo formateado en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml&lt;/code&gt; para almacenar la metadata del libro&lt;/li&gt;
  &lt;li&gt;Pondremos este repositorio (el directorio donde vive nuestro proyecto) bajo control de versiones con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Sincronizaremos este repositorio local con un repositorio remoto en GitHub&lt;/li&gt;
  &lt;li&gt;Utilizando pandoc, crearemos nuestro Epub, y crearemos un archivo ICML para importarlo en inDesign&lt;/li&gt;
  &lt;li&gt;Crearemos desde InDesign el PDF final de imprenta&lt;/li&gt;
  &lt;li&gt;Veremos como hacer correcciones, manteniendo un único set de archivos fuente y guardando un registro histórico de correcciones.&lt;/li&gt;
  &lt;li&gt;y por último, crearemos una página web con los archivos de nuestro libro.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;21-requisitos&quot;&gt;2.1 Requisitos&lt;/h3&gt;

&lt;p&gt;Para seguir este tutorial, es aconsejable (aunque no indispensable):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alguna familiaridad con la línea de comandos.&lt;/li&gt;
  &lt;li&gt;Tener conocimientos básicos de HTML y CSS.&lt;/li&gt;
  &lt;li&gt;Un conocimientos de InDesign a nivel de diseño editorial.&lt;/li&gt;
  &lt;li&gt;Una mente abierta (todo lo anterior se puede reemplazar con una aplicada búsqueda en Google, esto último no).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;23-herramientas--software&quot;&gt;2.3 Herramientas &amp;amp; software&lt;/h3&gt;

&lt;p&gt;Y deberemos tener instalado en nuestro PC:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Un editor de texto plano (no procesador de texto): yo utilizaré Atom, pero hay una serie de editores de texto igualmente útiles y libres (Visual Studio Code, Sublime Text, Vim, etc…)&lt;/li&gt;
  &lt;li&gt;Línea de comandos (en Windows, el PowerShell; en Linux, el terminal o uno cualquiera de sus emuladores; en Mac, la terminal).&lt;/li&gt;
  &lt;li&gt;Pandoc&lt;/li&gt;
  &lt;li&gt;InDesign&lt;/li&gt;
  &lt;li&gt;Git y el cliente de escritorio de GitHub&lt;/li&gt;
  &lt;li&gt;MS Word&lt;/li&gt;
  &lt;li&gt;Jeckyll&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instalar software es tedioso. De momento, vamos a sumir que (como yo) tenéis todo el software instalado en vuestro ordenador.&lt;/p&gt;

&lt;p&gt;Y dado que de lo que se trata es de probar algo distinto (no se puede esperar un resultado diferente si hacemos lo mismo), vamos a cambiar nuestro enfoque y utilizar Markdown como formato base, en lugar del consabido MS Word. Las razones para escoger markdown son exactamente las mismas que para desechar MS Word y se pueden resumir en los tres mantras de cualquier workflow editorial en un entorno digital:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;estructura&lt;/li&gt;
  &lt;li&gt;sostenibilidad&lt;/li&gt;
  &lt;li&gt;interoperatividad&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Necesitamos un archivo bien estructurado. Esto garantiza que pueda ser mapeado correctamente para la importación en InDesign, que se pueda generar un epub automáticamente, y que este epub, tal cual ha sido exportado por pandoc, sea accesible.&lt;/p&gt;

&lt;p&gt;El hecho de que trabajemos en texto plano (markdown más que un formato, es una convención para etiquetar texto plano), garantiza que estos archivos sean legibles por cualquier ordenador, sea cual sea el sistema operativo y el software que tengan instalado, ahora, hace treinta años o en el siglo XXII. Además, son tan interpretables por máquinas como legibles por humanos, y pesan ridículamente poco comparados con sus colegas con ínfulas, los archivos generados por procesadores de texto como MS Word o Open Office.&lt;/p&gt;

&lt;p&gt;Y por estas razones, son también fácilmente trasladables (de una maquina a otra, de un software a otro, de un lenguaje de etiquetado a otro). Si el archivo está bien estructurado, podemos hacer en efecto lo que queramos con él.&lt;/p&gt;

&lt;p&gt;Manos a la obra.&lt;/p&gt;

&lt;h3 id=&quot;configurar-el-espacio-de-trabajo&quot;&gt;Configurar el espacio de trabajo&lt;/h3&gt;

&lt;p&gt;Lo primero será crear el directorio donde van a vivir los archivos de mi proyecto. En mi ordenador será la carpeta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mioCidCampeador&lt;/code&gt;. Dentro de esta carpeta, además crearé una carpeta para las imágenes, otra para los archivos markdown y una última que llamaré &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; (por “source”: el archivo fuente o archivo base). para ello, nos situamos con el terminal en el directorio donde queremos crear la carpeta de nuestro proyecto), y escribimos:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir mioCidCampeador
cd mioCidCampeador
mkdir imagenes, markdown, src, indd, icml,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Naturalmente, también se puede crear la carpeta haciendo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click derecho &amp;gt; crear carpeta&lt;/code&gt;, pero para los propósitos de este tutorial, utilizaremos la línea de comandos: es más rápido y de esta manera nos familiarizamos con su uso.&lt;/p&gt;

&lt;p&gt;Una vez creada nuestra carpeta, podemos poner nuestro documento (si: mioCidFinal.docx) en la carpeta correspondiente (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;). Este es el punto de partida de nuestro proyecto.&lt;/p&gt;</content><author><name>la Vorágine</name></author><category term="edicion digital" /><category term="Proyectos" /><summary type="html">El propósito de este tutorial será mostrar desde un punto de vista práctico como combinar herramientas para crear un libro multiformato, de una mera sostenible y automatizada, y que, de paso, resuelve punto por punto nuestro problema..</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/flower2.jpeg" /><media:content medium="image" url="http://localhost:4000/flower2.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>